---
title: "22: Parallelization"
author: "Derek Sollberger"
date: "2024-11-21"
format:
  html:
    toc: true
    theme: cerulean
---

# SML 201

## Start

::: {.callout-note collapse="true"}
## Libraries and Loading the Data

```{r}
#| message: false
#| warning: false

library("janitor")
library("future")
library("parallel")
library("tidymodels")
library("tidyverse") #general framework for data wrangling

# school colors
princeton_orange <- "#E77500"
princeton_black  <- "#121212"

loan_raw <- readr::read_csv("loan_data_set.csv") |>
  janitor::clean_names()
```

:::

:::: {.columns}

::: {.column width="50%"}
* **Goal**: "Take out the Cheese" Day


:::

::: {.column width="10%"}

:::

::: {.column width="40%"}
* **Objectives**: 

- Shapiro-Wilk test
- Logistic regression revisited
- Parallelization

:::

::::

## Data: Home Loans

"Dream Housing Finance company deals in all home loans. They have presence across all urban, semi urban and rural areas. Customer first apply for home loan after that company validates the customer eligibility for loan."	

* Source: [Kaggle](https://www.kaggle.com/datasets/burak3ergun/loan-data-set)

### Explanatory Variables

* Gender (of primary applicant)
* Marital status (of primary applicant)
* Dependents 
* Education
* Self-employed
* Applicant income (monthly, in dollars)
* Co-applicant income (monthly, in dollars)
* loan amount terms (in months)
* Credit history
* Property area

### Cleaning

* remove rows that have missing values in the response variable (`loan_amount`)
* convert `dependents` to a numerical variable

    * here, replace "+" with nothing

* combine "income" columns

    * ensure all dollar amounts are in the same units (thousands of dollars)

* convert `credit_history` to a factor variable (i.e. categorical)

* retain relevant columns

```{r}
loan_df <- loan_raw |>
  filter(!is.na(loan_amount)) |>
  mutate(dependents_num = as.numeric(
    str_replace(dependents, "\\+", "")
  )) |>
  mutate(income = applicant_income/1000 + coapplicant_income/1000) |>
  mutate(credit_history = factor(credit_history)) |>
  select(loan_amount, income, dependents_num, gender, married, education, self_employed, credit_history, property_area, loan_status) |>
  mutate(approved = ifelse(loan_status == "Y", 1, 0),
         approved_fac = factor(approved,
                               levels = c(0,1))) |>
  select(loan_amount, income, dependents_num, gender, married, education, self_employed, credit_history, property_area, approved_fac)
```


# Normality

Historically, several concepts in statistics relied on the *assumption* that data were normally distributed.  So, how do we check if our data is normally distributed?

## QQ Plots

One way is to construct **quantile-quantile plots**.  Let us proceed with some more [ggplot] tech.

```{r}
loan_df |>
  ggplot(aes(sample = loan_amount)) +
  stat_qq() +
  stat_qq_line() +
  labs(title = "QQ Plot",
       subtitle = "Loan Amount looks to be normally distributed\nexcept for higher level amounts",
       caption = "Source: Dream House Finance",
       x = "quantile 1", y = "quantile 2") +
  theme_minimal()
```

```{r}
loan_df |>
  ggplot(aes(sample = log(loan_amount))) +
  stat_qq() +
  stat_qq_line() +
  labs(title = "QQ Plot",
       subtitle = "Log loan amount looks to be normally distributed\nexcept for the tails",
       caption = "Source: Dream House Finance",
       x = "quantile 1", y = "quantile 2") +
  theme_minimal()
```

This could also be shown in groups.

```{r}
loan_df |>
  ggplot(aes(sample = log(loan_amount),
             color = factor(approved_fac))) +
  stat_qq() +
  stat_qq_line() +
  labs(title = "QQ Plot",
       subtitle = "Log loan amount looks to be normally distributed\nexcept for the tails",
       caption = "Source: Dream House Finance",
       x = "quantile 1", y = "quantile 2") +
  theme_minimal()
```


## Shapiro-Wilk Test

* null hypothesis: data is normally distributed
* alternative hypothesis: data is not normally distributed

```{r}
stats::shapiro.test(loan_df$loan_amount)
```
```{r}
stats::shapiro.test(log(loan_df$loan_amount))
```


# Logistic Regression (in tidymodels)

```{r}
# cross-validation folds
loan_cv <- vfold_cv(loan_df, v = 10)

# specification (penalized logistic regression)
loan_spec <- logistic_reg(penalty = tune(), 
                          mixture = 0) |>
  set_engine("glmnet")

# recipe
loan_recipe <- recipe(approved_fac ~ .,
                      data = loan_df) |>
  step_novel(all_nominal_predictors()) |>
  step_dummy(all_nominal_predictors()) |>
  step_zv(all_predictors()) |>
  step_normalize(all_predictors())

# workflow
loan_workflow <- workflow(loan_recipe, loan_spec)

# parameter grid
lambda_grid <- grid_regular(penalty(range = c(-3, 3)),
                            levels = 50)
```

```{r}
#| warning: false
start_time <- Sys.time()

future::plan(multisession, workers = 1)

tune_results <- tune_grid(
  loan_workflow,
  resamples = loan_cv,
  grid = lambda_grid,
)

brute_force_time <- Sys.time() - start_time
```

## Parallelization

```{r}
parallel::detectCores()
```

```{r}
#| warning: false
start_time <- Sys.time()

future::plan(multisession, workers = 5)

tune_results <- tune_grid(
  loan_workflow,
  resamples = loan_cv,
  grid = lambda_grid
)

parallelization_time <- Sys.time() - start_time
```

```{r}
print("The brute force time was")
print(brute_force_time)
```

```{r}
print("The parallelized processing time was")
print(parallelization_time)
```




# Quo Vadimus?

:::: {.columns}

::: {.column width="40%"}
* Exam 2 (December 5)
:::

::: {.column width="10%"}
	
:::

::: {.column width="50%"}


:::

::::


# Footnotes

::: {.callout-note collapse="true"}
## (optional) Additional Resources

* more about [normality tests in R](https://userconf2024.sched.com/event/1c8uW/a-comprehensive-list-of-normality-tests-in-r-fernando-correa-curso-r) by Fernando "Curso-R" Correa

:::

::: {.callout-note collapse="true"}
## Session Info

```{r}
sessionInfo()
```
:::


::: {.callout-note collapse="true"}
## Example Callout Block

`note`, `tip`, `warning`, `caution`, or `important`
:::


:::: {.columns}

::: {.column width="45%"}
	
:::

::: {.column width="10%"}
	
:::

::: {.column width="45%"}

:::

::::

::::: {.panel-tabset}



:::::