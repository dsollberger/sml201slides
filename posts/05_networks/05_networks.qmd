---
title: "5: Networks"
author: "Derek Sollberger"
date: "2024-09-17"
# format:
#   revealjs:
#     scrollable: true
format:
  html:
    toc: true
---

```{r}
#| echo: false
#| message: false
#| warning: false
library("gt")
library("tidyverse")
library("webexercises")
library("visNetwork")

restaurant_df <- data.frame(
  source = c("breakfast", "lunch", "breakfast", 
             "lunch", "dinner", "lunch", "dinner"), 
  target = c("Jammin Crepes", 
             "Jammin Crepes", "Nassau Diner", "Nassau Diner", "Nassau Diner", 
             "tacoria", "tacoria"))
classes_df <- readr::read_csv("classes_data.csv")
majors_df <- readr::read_csv("majors_data.csv")
music_df <- readr::read_csv("music_data.csv")

princeton_orange <- "#E77500"
princeton_black  <- "#121212"
```


# SML 201

## Start

:::: {.columns}

::: {.column width="45%"}
* **Goal**: Visualize network data

* **Objective**: Arrange paired data into nodes and edges
:::

::: {.column width="10%"}

:::

::: {.column width="45%"}
![network terminology](graph_example_terms.png)

* image source: [MRI Questions](https://s.mriquestions.com/networkgraphs.html)
:::

::::

## Template Files

Moving forward, those who want to type along with the lecture sessio will probably want to use template files

1. Go to our Canvas Page --> Files --> lecture_notes
2. *Download* today's template file
3. Move that .qmd file into your SML 201 folder
4. Open that template file


# Simple Example

:::: {.panel-tabset}

## Restaurants

```{r}
#| echo: false
#| eval: true
# restaurant_network <- igraph::graph_from_data_frame(
#   restaurant_df,    #edge information goes first
#   directed = FALSE) #undirected network
# plot(restaurant_network)

node_tbl <- tibble(id = restaurant_df$source,
                  label = restaurant_df$source,
                  color = "green",
                  shape = "circle")
node_tbl <- node_tbl |>
  bind_rows(
    tibble(id = restaurant_df$target,
           label = restaurant_df$target,
           color = "yellow",
           shape = "circle")
  ) |>
  distinct()

edge_tbl <- tibble(
  from = restaurant_df$source,
  to = restaurant_df$target)

visNetwork(nodes = node_tbl, 
           edges = edge_tbl,
           main = "Restaurants on Nassau Street")
```

## Edge Info

```{r}
#| echo: false
#| eval: true
restaurant_df <- data.frame(
  meal = c("breakfast", "lunch", "breakfast", 
             "lunch", "dinner", "lunch", "dinner"), 
  restaurant = c("Jammin Crepes", 
             "Jammin Crepes", "Nassau Diner", "Nassau Diner", "Nassau Diner", 
             "tacoria", "tacoria"))

restaurant_df |>
  gt() |>
  cols_align(align = "center") |>
  tab_header(
    title = "Restaurants on Nassau Street",
    subtitle = "by meal time")
```

## Table code

```{r}
#| echo: true
#| eval: false
restaurant_df <- data.frame(
  meal = c("breakfast", "lunch", "breakfast", 
             "lunch", "dinner", "lunch", "dinner"), 
  restaurant = c("Jammin Crepes", 
             "Jammin Crepes", "Nassau Diner", "Nassau Diner", "Nassau Diner", 
             "tacoria", "tacoria"))

restaurant_df |>
  gt() |>
  cols_align(align = "center") |>
  tab_header(
    title = "Restaurants on Nassau Street",
    subtitle = "by meal time")
```

## visNetwork code

```{r}
#| echo: true
#| eval: false
node_tbl <- tibble(id = restaurant_df$meal,
                  label = restaurant_df$meal,
                  color = "green",
                  shape = "circle")
node_tbl <- node_tbl |>
  bind_rows(
    tibble(id = restaurant_df$restaurant,
           label = restaurant_df$restaurant,
           color = "yellow",
           shape = "circle")
  ) |>
  distinct()

edge_tbl <- tibble(
  from = restaurant_df$meal,
  to = restaurant_df$restaurant)

visNetwork(nodes = node_tbl, 
           edges = edge_tbl,
           main = "Restaurants on Nassau Street")
```

::::


# Student Data

:::: {.columns}

::: {.column width="45%"}
Last week, I asked students to fill out a survey with

* current classes
* majors, minors, and certificates
* music recommendations

```{r}
#| echo: true
#| eval: false

classes_df <- readr::read_csv("https://raw.githubusercontent.com/dsollberger/sml201slides/main/posts/05_networks/classes_data.csv")
majors_df <- readr::read_csv("https://raw.githubusercontent.com/dsollberger/sml201slides/main/posts/05_networks/majors_data.csv")
music_df <- readr::read_csv("https://raw.githubusercontent.com/dsollberger/sml201slides/main/posts/05_networks/music_data.csv")
```


:::

::: {.column width="10%"}
	
:::

::: {.column width="45%"}
![Dwight from The Office](dwight_health_care.png)
:::

::::

# Music

```{r}
str(music_df, give.attr = FALSE)
```

Objective: Create a data frame with two columns

1. source: artist
2. target: song

## rbind

```{r}
df1 <- music_df |>
  select(artist1, song1) |>
  set_names(c("artist", "song"))
df2 <- music_df |>
  select(artist2, song2) |>
  set_names(c("artist", "song"))

music_long <- df1 |>
  rbind(df2) |>
  separate_longer_delim(artist, delim = ", ") |>
  filter(!is.na(artist)) |>
  filter(!is.na(song))
```

## top_n

Who are the top 5 most frequent artists in the data set?

```{r}
music_long |>
  count(artist) |>
  arrange(desc(n)) |>
  top_n(5, wt = n)
```

```{r}
top_artists <- music_long |>
  count(artist) |>
  arrange(desc(n)) |>
  top_n(5, wt = n) |>
  pull(artist)
```

## Node Tibble

```{r}
node_tbl <- tibble(id = music_long$artist,
                  label = music_long$artist,
                  color = "green",
                  shape = "circle")
node_tbl <- node_tbl |>
  bind_rows(
    tibble(id = music_long$song,
           label = music_long$song,
           color = "yellow",
           shape = "circle")
  ) |>
  distinct()
```

## Edge Tibble

```{r}
edge_tbl <- tibble(
  from = music_long$artist,
  to = music_long$song,
  arrow = "to") #directed network
```

## vizNetwork Plot

```{r}
visNetwork(nodes = node_tbl, 
           edges = edge_tbl,
           main = "Song Playlist Network")
```

## Filtered Plot

```{r}
music_top <- music_long |>
  filter(artist %in% top_artists)

node_tbl <- tibble(id = music_top$artist,
                  label = music_top$artist,
                  color = "green",
                  shape = "circle")
node_tbl <- node_tbl |>
  bind_rows(
    tibble(id = music_top$song,
           label = music_top$song,
           color = "yellow",
           shape = "circle")
  ) |>
  distinct()

edge_tbl <- tibble(
  from = music_top$artist,
  to = music_top$song)

visNetwork(nodes = node_tbl, 
           edges = edge_tbl,
           main = "Song Playlist Network")
```

## Other Music

We can negate the `%in%` to create a complement set of lessor known songs. We can also use the `sample` function to display a small number of those songs.

```{r}
music_long |>
  filter(!(artist %in% top_artists)) |>
  sample_n(10)
```


# Majors and Minors

```{r}
str(majors_df, give.attr = FALSE)
```

## Node Tibble

```{r}
node_tbl <- tibble(id = majors_df$major,
                  label = majors_df$major,
                  color = "#E77500",
                  shape = "circle") |>
  bind_rows(
    tibble(id = majors_df$minor1,
           label = majors_df$minor1,
           color = "#121212",
           opacity = 0.5,
           shape = "circle")
  ) |> 
  bind_rows(
    tibble(id = majors_df$minor2,
           label = majors_df$minor2,
           color = "#121212",
           opacity = 0.5,
           shape = "circle")
  ) |> 
  distinct(id, .keep_all = TRUE)
```

## Edge Tibble

```{r}
edge_tbl <- tibble(
  from = majors_df$major,
  to = majors_df$minor1,
  color = "#333333") |>
  bind_rows(
    tibble(from = majors_df$major,
           to = majors_df$minor2,
           color = "#333333")
  ) |>
  filter(!is.na(to))
```

## vizNetwork Plot

```{r}
visNetwork(nodes = node_tbl, 
           edges = edge_tbl,
           main = "Majors and Minors at Princeton\nAmong SML 201 Students")
```


# Classes

```{r}
str(classes_df, give.attr = FALSE)
```

## Node Tibble

```{r}
#| message: false
#| warning: false
node_tbl <- tibble(
  id = classes_df$class1,
  label = classes_df$class1) |>
  bind_rows(tibble(
    id = classes_df$class2,
    label = classes_df$class2
  )) |>
  bind_rows(tibble(
    id = classes_df$class3,
    label = classes_df$class3
  )) |>
  bind_rows(tibble(
    id = classes_df$class4,
    label = classes_df$class4
  )) |>
  bind_rows(tibble(
    id = classes_df$class5,
    label = classes_df$class5
  )) |>
  bind_rows(tibble(
    id = classes_df$class6,
    label = classes_df$class6
  )) |>
  distinct() |>
  filter(!is.na(id)) |>
  filter(id != "SML 201") |>
  separate(id, into = c("dept", "num"), 
           sep = " ", remove = FALSE)
```

## Edge Tibble

```{r}
edge_tbl <- tibble(
  from   = classes_df$class1,
  to     = classes_df$class2
) |>
  bind_rows(tibble(
    from = classes_df$class1,
    to   = classes_df$class3
  )) |>
  bind_rows(tibble(
    from = classes_df$class1,
    to   = classes_df$class4
  )) |>
  bind_rows(tibble(
    from = classes_df$class1,
    to   = classes_df$class5
  )) |>
  bind_rows(tibble(
    from = classes_df$class1,
    to   = classes_df$class6
  )) |>
  bind_rows(tibble(
    from = classes_df$class2,
    to   = classes_df$class3
  )) |>
  bind_rows(tibble(
    from = classes_df$class2,
    to   = classes_df$class4
  )) |>
  bind_rows(tibble(
    from = classes_df$class2,
    to   = classes_df$class5
  )) |>
  bind_rows(tibble(
    from = classes_df$class2,
    to   = classes_df$class6
  )) |>
  bind_rows(tibble(
    from = classes_df$class3,
    to   = classes_df$class4
  )) |>
  bind_rows(tibble(
    from = classes_df$class3,
    to   = classes_df$class5
  )) |>
  bind_rows(tibble(
    from = classes_df$class3,
    to   = classes_df$class6
  )) |>
  bind_rows(tibble(
    from = classes_df$class4,
    to   = classes_df$class5
  )) |>
  bind_rows(tibble(
    from = classes_df$class4,
    to   = classes_df$class6
  )) |>
  bind_rows(tibble(
    from = classes_df$class5,
    to   = classes_df$class6
  )) |>
  distinct() |>
  filter(!is.na(to)) |>
  filter(from != "SML 201") |>
  separate(from, into = c("dept_from", "num_from"), 
           sep = " ", remove = FALSE) |>
  separate(to, into = c("dept_to", "num_to"), 
           sep = " ", remove = FALSE)
```

## vizNetwork Plot

```{r}
visNetwork(nodes = node_tbl, 
           edges = edge_tbl,
           main = "Current Classes",
           submain = "Among SML 201 Students") |>
  visPhysics(maxVelocity = 5,
             stabilization = list(iterations = 5))
```

## Highlighted Plot

```{r}
dept_abbrev = "MOL"

node_tbl <- node_tbl |>
  mutate(color = ifelse(dept == dept_abbrev,
                        "#E77500", "#DDDDDD"),
         opacity = ifelse(dept == dept_abbrev,
                        1.0, 0.5))
edge_tbl <- edge_tbl |>
  mutate(color = ifelse(dept_from == dept_abbrev | dept_to == dept_abbrev,
                        "#E77500", "#DDDDDD"))


visNetwork(nodes = node_tbl, 
           edges = edge_tbl,
           main = "Classes Connected to MOL BIO",
           submain = "Among SML 201 Students") |>
  visPhysics(maxVelocity = 5,
             stabilization = list(iterations = 5))
```


# Saving Images

While there are tools in the `visNetwork` and `webshot` packages to help export a network to an image, it is probably just as practical to go to your HTML rendered output and right-clicking on an image to bring up "Take screenshot"

# Precept 3

:::: {.columns}

::: {.column width="45%"}
* GPUs power generative AI
* Nvidia's stock grew a lot in 2023
* Is Nvidia still dominant in 2024?
:::

::: {.column width="10%"}
	
:::

::: {.column width="45%"}
![Nvidia's growth in 2023](nvidia_2023.png)

* image credit: Louis Krauskopf

:::

::::

# Quo Vadimus?

:::: {.columns}

::: {.column width="30%"}
* Assignments:

    * Precept 3
    * BLT0919
    * Coloring Assignment 1
    
* Project 1:

    * assigned: Sept 23
    * due: Oct 2
    
* Exam 1: Oct 10
:::

::: {.column width="10%"}
	
:::

::: {.column width="60%"}
![Game of Thrones network](graph_example_GOT.png)

* image source: [A Comprehensive Survey of Time Series Anomaly Detection in Online Social Network Data](https://www.researchgate.net/figure/Graph-theory-analysis-in-social-network-Image-courtesy-of-5_fig1_321846685) by Md Rafiqul Islam, et al

:::

::::


# Footnotes

::: {.callout-note collapse="true"}
## (optional) How the data set was cleaned and anonymized

```{r}
#| echo: true
#| eval: false

networks_raw <- readr::read_csv("BLT0910 Survey Student Analysis Report.csv")
short_names <- c(paste0("class", 1:6), "major", "minor1", "minor2", "spacer", "song1", "artist1", "song2", "artist2")

networks_df <- networks_raw |>
  select(seq(11, 37, 2)) |> #remove student names and canvas metadata
  set_names(c(short_names))
  # mutate_if(is.character, stringi::stri_enc_toutf8) |>
  # mutate_if(is.character, str_trim)
  

classes_df <- networks_df |>
  select(paste0("class", 1:6), major)

majors_df <- networks_df |>
  select(major, minor1, minor2)

music_df <- networks_df |>
  select(song1, artist1, song2, artist2)

readr::write_csv(classes_df, "classes_data.csv")
readr::write_csv(majors_df, "majors_data.csv")
readr::write_csv(music_df, "music_data.csv")
```

:::

::: {.callout-note collapse="true"}

## (optional) Additional Resources



:::

::: {.callout-note collapse="true"}
## Session Info

```{r}
sessionInfo()
```
:::


::: {.callout-note collapse="true"}
## Example Callout Block

`note`, `tip`, `warning`, `caution`, or `important`
:::


:::: {.columns}

::: {.column width="45%"}
	
:::

::: {.column width="10%"}
	
:::

::: {.column width="45%"}

:::

::::

:::: {.panel-tabset}



::::