---
title: "7: Correlation"
author: "Derek Sollberger"
date: "2024-09-24"
format:
  html:
    toc: true
---

```{r}
#| message: false
#| warning: false
library("corrplot")
library("gt")
library("tidyverse") #tools for data wrangling and visualization

# coffee_df <- readr::read_csv("coffee_ratings.csv")
correlatedValues = function(x, r = 0.9){
  r2 = r**2
  ve = 1-r2
  SD = sqrt(ve)
  e  = rnorm(length(x), mean=0, sd=SD)
  y  = r*x + e
  return(y)
}
judging_categories <- c("aroma", "flavor", "aftertaste", "acidity", "body", "balance", "uniformity", "clean_cup", "sweetness")
```


# SML 201

## Start

:::: {.columns}

::: {.column width="30%"}
* **Goal**: Explore covariance

* **Objective**: Compute interquartile ranges and correlations
:::

::: {.column width="10%"}

:::

::: {.column width="60%"}
![correlation](xkcd552.png)

* image source: [XKCD](https://xkcd.com/552/)
:::

::::

## Data

:::: {.columns}

::: {.column width="45%"}
* Coffee Ratings
* source: [Coffee Quality Database](https://github.com/jldbc/coffee-quality-database)
* host: [TidyTuesday](https://github.com/rfordatascience/tidytuesday/blob/master/data/2020/2020-07-07/readme.md) --- July 7, 2020
:::

::: {.column width="10%"}
	
:::

::: {.column width="45%"}
```{r}
#| message: false
#| warning: false
coffee_df <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-07-07/coffee_ratings.csv')
```
:::

::::


# Quantiles

## Numerical Variables

```{r}
str(coffee_df, give.attr = FALSE)
```

Recall that we can use `summary` on a numerical variable.

```{r}
summary(coffee_df$total_cup_points)
```

The `dplyr` way to compute quantiles includes

```{r}
coffee_df |>
  summarize(min = min(total_cup_points, na.rm = TRUE),
            q25 = quantile(total_cup_points, 0.25, na.rm = TRUE),
            q50 = quantile(total_cup_points, 0.50, na.rm = TRUE),
            q75 = quantile(total_cup_points, 0.75, na.rm = TRUE),
            max = max(total_cup_points, na.rm = TRUE))
```
We can verify that about 50% of the data are below the median value

```{r}
mean(coffee_df$total_cup_points < 
       median(coffee_df$total_cup_points))
```


We can verify that about 75% of the data are indeed below that value for the 0.75 quantile (i.e. 75th percentile.)

```{r}
mean(coffee_df$total_cup_points < 83.67)
```

The *interquartile range* is the 75th percentile minus the 25th percentile.

```{r}
summary(coffee_df$total_cup_points)
```

```{r}
IQR(coffee_df$total_cup_points, na.rm = TRUE)
```


## Categorical Group

The `dplyr` code is easily adaptable to grouped data.

```{r}
coffee_df |>
  group_by(species) |>
  summarize(min = min(total_cup_points, na.rm = TRUE),
            q25 = quantile(total_cup_points, 0.25, na.rm = TRUE),
            q50 = quantile(total_cup_points, 0.50, na.rm = TRUE),
            q75 = quantile(total_cup_points, 0.75, na.rm = TRUE),
            max = max(total_cup_points, na.rm = TRUE))
```

# Boxplots

For these lecture slides, I wanted that previous table to be displayed vertically. This is a crude way to write a summary table as a vertical data frame.

```{r}
summary_df <- coffee_df |>
  group_by(species) |>
  mutate(min_val = min(total_cup_points, na.rm = TRUE),
         q25 = quantile(total_cup_points, 0.25, na.rm = TRUE),
         q50 = quantile(total_cup_points, 0.50, na.rm = TRUE),
         q75 = quantile(total_cup_points, 0.75, na.rm = TRUE),
         max_val = max(total_cup_points, na.rm = TRUE)) |>
  ungroup() |>
  select(species, min_val, q25, q50, q75, max_val) |>
  distinct() |>
  rev() |> #reverse order of columns
  t() |>   #transpose (switch rows and columns)
  data.frame() |>
  slice(1:5) |>
  set_names(c("Arabica", "Robusta"))
```

Here I color code the data within the `gt` framework.

```{r}
summary_df |>
  gt() |>
  tab_style(
    style = list(cell_text(color = "red")),
    locations = cells_body(columns = "Arabica")
  ) |>
  tab_style(
    style = list(cell_text(color = "blue")),
    locations = cells_body(columns = "Robusta")
  )
```

A *boxplot* is useful to graph a numerical variable (on the vertical axis) across a categorical variable (on the horizontal axis).

```{r}
coffee_df |>
  filter(total_cup_points > 0) |> #avoid one outlier
  ggplot() +
  geom_boxplot(aes(x = species, y = total_cup_points, color = species)) +
  labs(title = "Coffee Ratings",
       subtitle = "Total points vs Species",
       caption = "Source: Coffee Quality Database",
       x = "species", y = "total points") +
  scale_color_manual(values = c("red","blue")) +
  theme_minimal() +
  theme(legend.position = "none")
```

## Another Example

:::: {.panel-tabset}

### 1

```{r}
coffee_df |>
  filter(!is.na(processing_method)) |>
  group_by(processing_method) |>
  summarize(min = min(total_cup_points, na.rm = TRUE),
            q25 = quantile(total_cup_points, 0.25, na.rm = TRUE),
            q50 = quantile(total_cup_points, 0.50, na.rm = TRUE),
            q75 = quantile(total_cup_points, 0.75, na.rm = TRUE),
            max = max(total_cup_points, na.rm = TRUE))
```

### 2

```{r}
coffee_df |>
  filter(!is.na(processing_method)) |>
  group_by(processing_method) |>
  mutate(min_val = min(total_cup_points, na.rm = TRUE),
         q25 = quantile(total_cup_points, 0.25, na.rm = TRUE),
         q50 = quantile(total_cup_points, 0.50, na.rm = TRUE),
         q75 = quantile(total_cup_points, 0.75, na.rm = TRUE),
         max_val = max(total_cup_points, na.rm = TRUE)) |>
  ungroup() |>
  select(processing_method, min_val, q25, q50, q75, max_val) |>
  distinct() |>
  rev() |> #reverse order of columns
  t() |>   #transpose (switch rows and columns)
  data.frame() |>
  slice(1:5) |>
  set_names(c("washed", "natural", "pulped", "semi", "other"))
```

### Boxplot

```{r}
coffee_df |>
  filter(!is.na(processing_method)) |>
  ggplot() +
  geom_boxplot(aes(x = processing_method, y = total_cup_points,
                   color = processing_method)) +
  labs(title = "Coffee Ratings",
       subtitle = "Total Points vs Processing Method",
       caption = "Source: Coffee Quality Database",
       x = "", y = "total points") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45),
        legend.position = "none")
```

::::

# Scatterplots

A **scatterplot** helps us visualize two numerical variables.

```{r}
coffee_df |>
  filter(total_cup_points > 0) |>
  ggplot(aes(x = acidity, y = body)) +
  geom_point() +
  labs(title = "Coffee Ratings",
       subtitle = "Do the data vary together?",
       caption = "Source: Coffee Quality Database") +
  theme_minimal()
```


## Covariance

:::: {.panel-tabset}

## Formula

For data $(X,Y)$ listed as $n$ data points $(x_{i}, y_{i})$, the **covariance** is defined as

$$\begin{array}{rcl}
  \text{Cov}(X,Y) & = & \frac{1}{2n^{2}}\sum_{i=1}^{n}\sum_{j=1}^{n}(x_{i} - x_{j})(y_{i} - y_{j}) \\
  ~ & = & \text{E}[X] \cdot \text{E}[Y] - \text{E}[XY] \\
  \end{array}$$

## Intuition

![constructive or destructive waves](constructive_destructive_waves.png)

* image source: [Fissics](https://www.fizzics.org/interference-of-waves/)

## Commentary

* Are resultant numbers large or small?
* Units? (e.g. "burger-fries")

::::

## Standardization

:::: {.columns}

::: {.column width="45%"}
### z-score

$$\begin{array}{ccc}
z & = & \frac{x - \bar{x}}{s} \\
~ & = & \frac{\text{deviation}}{\text{standard deviation}} \\
\end{array}$$
:::

::: {.column width="10%"}
	
:::

::: {.column width="45%"}
### Correlation

$$\begin{array}{ccc}
  r & = & \frac{\sum_{i=1}^{n} (x_{i} - \bar{x})(y_{i} - \bar{y})}{\sqrt{\sum_{i=1}^{n} (x_{i} - \bar{x})}\sqrt{\sum_{i=1}^{n} (y_{i} - \bar{y})}} \\
  ~ & = & \frac{\text{Cov}(X,Y)}{\text{SD}(X) \cdot \text{SD}(Y)} \\
  ~ & = & \frac{1}{n-1}\sum_{i=1}^{n}\left(\frac{x_{i}-\bar{x}}{s_{x}}\right)\left(\frac{y_{i}-\bar{y}}{s_{y}}\right) \\
\end{array}$$
:::

::::

**Claim**: The *correlation coefficient* $r$ has a mathematical range in $[-1,1]$:

$$-1 \leq r \leq 1$$

::: {.callout-note collapse="true"}
## Proof

[refer to a Calculus-based Probability course]
:::


# Correlation

:::: {.columns}

::: {.column width="60%"}
In this course, we will simply follow the Pearson suggestions for interpreting correlation values:

* $-1.0 \leq r \leq -0.7$: highly and negatively correlated
* $-0.7 < r < -0.4$: slightly and negatively correlated
* $-0.4 \leq r \leq 0.4$: virtually uncorrelated
* $0.4 < r < 0.7$: slightly and positively correlated
* $0.7 \leq r \leq 1.0$: highly and positively correlated	
:::

::: {.column width="10%"}
	
:::

::: {.column width="30%"}
![Karl Pearson](Karl_Pearson.png)
:::

::::

## Demonstration

::: {.panel-tabset}

### 1

```{r}
#| echo: false
x <- rnorm(100, mean = 0, sd = 1)
y <- correlatedValues(x, r = -0.9)

cor_value <- cor(x,y, use = "pairwise.complete.obs")

df_for_graph <- data.frame(x,y)
df_for_graph |>
  ggplot(aes(x = x, y = y)) +
  geom_point() +
  labs(title = "Correlation Example",
       subtitle = paste0("r = ", round(cor_value, 4), 
                         ", strongly and negatively correlated"),
       caption = "SML 201")
```

### 2

```{r}
#| echo: false
x <- rnorm(100, mean = 0, sd = 1)
y <- correlatedValues(x, r = -0.5)

cor_value <- cor(x,y, use = "pairwise.complete.obs")

df_for_graph <- data.frame(x,y)
df_for_graph |>
  ggplot(aes(x = x, y = y)) +
  geom_point() +
  labs(title = "Correlation Example",
       subtitle = paste0("r = ", round(cor_value, 4), 
                         ", slightly and negatively correlated"),
       caption = "SML 201")
```

### 3

```{r}
#| echo: false
x <- rnorm(100, mean = 0, sd = 1)
y <- correlatedValues(x, r = 0)

cor_value <- cor(x,y, use = "pairwise.complete.obs")

df_for_graph <- data.frame(x,y)
df_for_graph |>
  ggplot(aes(x = x, y = y)) +
  geom_point() +
  labs(title = "Correlation Example",
       subtitle = paste0("r = ", round(cor_value, 4), 
                         ", virtually uncorrelated"),
       caption = "SML 201")
```

### 4

```{r}
#| echo: false
x <- rnorm(100, mean = 0, sd = 1)
y <- correlatedValues(x, r = 0.5)

cor_value <- cor(x,y, use = "pairwise.complete.obs")

df_for_graph <- data.frame(x,y)
df_for_graph |>
  ggplot(aes(x = x, y = y)) +
  geom_point() +
  labs(title = "Correlation Example",
       subtitle = paste0("r = ", round(cor_value, 4), 
                         ", slightly and positively correlated"),
       caption = "SML 201")
```

### 5

```{r}
#| echo: false
x <- rnorm(100, mean = 0, sd = 1)
y <- correlatedValues(x, r = 0.9)

cor_value <- cor(x,y, use = "pairwise.complete.obs")

df_for_graph <- data.frame(x,y)
df_for_graph |>
  ggplot(aes(x = x, y = y)) +
  geom_point() +
  labs(title = "Correlation Example",
       subtitle = paste0("r = ", round(cor_value, 4), 
                         ", strongly and positively correlated"),
       caption = "SML 201")
```

:::

## Examples

Compute the correlation between `flavor` and `aftertaste`

```{r}
cor(coffee_df$flavor, coffee_df$aftertaste)
```

Compute the correlation between `uniformity` and `clean_cup`

```{r}
cor(coffee_df$uniformity, coffee_df$clean_cup,
    use = "pairwise.complete.obs")
```

Compute the correlation between `aroma` and `sweetness`

```{r}
cor(coffee_df$aroma, coffee_df$sweetness,
    use = "pairwise.complete.obs")
```


# Correlation Matrices

```{r}
coffee_df |>
  select_if(is.numeric) |>
  cor(use = "pairwise.complete.obs") |>
  corrplot.mixed(order = "FPC", upper = "ellipse")
```

```{r}
coffee_df |>
  select(any_of(c(judging_categories, "total_cup_points"))) |>
  cor() |>
  corrplot.mixed(order = "FPC", upper = "ellipse")
```


# Quo Vadimus?

:::: {.columns}

::: {.column width="45%"}

* Continue to complete BLTs and precept assignments
* Project 1:

    * Assigned! Sept 23
    * Due: Oct 2
    
* Exam 1: Oct 10
* Refer to weekly announcement for more info
:::

::: {.column width="10%"}
	
:::

::: {.column width="45%"}


:::

::::


# Footnotes

::: {.callout-note collapse="true"}

## (optional) Additional Resources

* [vignette](https://cran.r-project.org/web/packages/corrplot/vignettes/corrplot-intro.html) about `corrplot` by Taiyun Wei and Viliam Simko

:::

::: {.callout-note collapse="true"}
## Session Info

```{r}
sessionInfo()
```
:::


::: {.callout-note collapse="true"}
## Example Callout Block

`note`, `tip`, `warning`, `caution`, or `important`
:::


:::: {.columns}

::: {.column width="45%"}
	
:::

::: {.column width="10%"}
	
:::

::: {.column width="45%"}

:::

::::

:::: {.panel-tabset}



::::