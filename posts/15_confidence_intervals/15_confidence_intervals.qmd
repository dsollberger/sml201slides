---
title: "15: Confidence Intervals"
author: "Derek Sollberger"
date: "2024-10-31"
format:
  html:
    toc: true
    theme: cerulean
---

# SML 201

::: {.callout-note collapse="true"}
## Libraries and Helper Functions

```{r}
#| message: false
#| warning: false
library("bayesrules") #data set: Pulse of the Nation
library("ggimage")    #customize images for scatterpoint points
library("ggtext")     #adorn ggplot text
library("gt")         #great tables
library("infer")      #streamlined code for inference tasks
library("janitor")    #compute proportions easily
library("tidyverse")  #tools for data wrangling and visualization

# school colors
princeton_orange <- "#E77500"
princeton_black  <- "#121212"

# data set: Pulse of the Nation
data(pulse_of_the_nation)
pulse_df <- pulse_of_the_nation

# data set: SML 201 demographics survey
demo_df <- readr::read_csv("https://raw.githubusercontent.com/dsollberger/sml201slides/main/posts/04_categories/sml201survey.csv")
```

```{r}
# helper function
vnorm <- function(x, mu = 0, sigma = 1, section = "lower"){
  
  # bell curve
  x_vals <- seq(mu - 4*sigma, mu + 4*sigma, length.out = 201)
  y_vals <- dnorm(x_vals, mu, sigma)
  df_for_graph <- data.frame(x_vals, y_vals)

  # outline shaded regions
  if(length(x) == 1){
    shade_left <- rbind(c(x[1],0), df_for_graph |>
                        filter(x_vals < x[1]))
    shade_right <- rbind(c(x[1],0), df_for_graph |>
                        filter(x_vals > x[1]))
  }
  if(length(x) == 2){
    shade_between <- rbind(c(x[1],0),
                       df_for_graph |>
                         filter(x_vals > x[1] &
                                  x_vals < x[2]),
                       c(x[2],0))
    shade_tails <- rbind(df_for_graph |>
                        filter(x_vals < x[1]),
                     c(x[1],0),
                     c(x[2],0),
                     df_for_graph |>
                        filter(x_vals > x[2]))
  }
  if(section == "lower"){
    bell_curve <- df_for_graph |>
      ggplot(aes(x_vals, y_vals)) +
      geom_polygon(aes(x = x_vals, y = y_vals),
                   data = shade_left,
                   fill = "#E77500",) +
      geom_line(color = "gray50", linewidth = 2)
    prob_val <- round(pnorm(x,mu,sigma), 4)
  }
  if(section == "upper"){
    bell_curve <- df_for_graph |>
      ggplot(aes(x_vals, y_vals)) +
      geom_polygon(aes(x = x_vals, y = y_vals),
                   data = shade_right,
                   fill = "#E77500",) +
      geom_line(color = "gray50", linewidth = 2)
    prob_val <- 1 - round(pnorm(x,mu,sigma), 4)
  }
  if(section == "between"){
    bell_curve <- df_for_graph |>
      ggplot(aes(x_vals, y_vals)) +
      geom_polygon(aes(x = x_vals, y = y_vals),
                   data = shade_between,
                   fill = "#E77500",) +
      geom_line(color = "gray50", linewidth = 2)
    prob_val <- round(diff(pnorm(x,mu,sigma)), 4)
  }
  if(section == "tails"){
    bell_curve <- df_for_graph |>
      ggplot(aes(x_vals, y_vals)) +
      geom_polygon(aes(x = x_vals, y = y_vals),
                   data = shade_tails,
                   fill = "#E77500",) +
      geom_line(color = "gray50", linewidth = 2)
    prob_val <- round(1 - diff(pnorm(x,mu,sigma)), 4)
  }
  
  # plot bell curve
  bell_curve + 
    labs(subtitle = paste0("Probability: ", prob_val),
         caption = "SML 201", y = "") +
    theme_minimal()
}
```

:::

## Start

:::: {.columns}

::: {.column width="50%"}
* **Goal**: Estimate unknown population statistics

* **Objective**: Deploy and interpret confidence intervals
:::

::: {.column width="10%"}

:::

::: {.column width="40%"}
![Ghostbusters (1984)](ghostbusters_1984_movie_poster.png)
:::

::::

# Old Methods

## Scenario: Believe in Ghosts?

::::: {.panel-tabset}

## Query

:::: {.columns}

::: {.column width="45%"}
![Ray Stantz](Ray_Stantz.png)	
:::

::: {.column width="10%"}
	
:::

::: {.column width="45%"}
What proportion of people believe that ghosts exist?
:::

::::

## Data

:::: {.columns}

::: {.column width="45%"}
* source: [Pulse of the Nation](https://thepulseofthenation.com/#intro) survey by Cards Against Humanity
* Poll 1: September 2017

* 1000 observations
* 15 variables

:::

::: {.column width="10%"}

:::

::: {.column width="45%"}
![Pulse of the Nation](pulse_of_the_nation.png)
:::

::::
:::::


## Normal Distribution

:::: {.columns}

::: {.column width="45%"}
![](Walter_Peck.png)	
Walter Peck wants estimates to have at least *95 percent confidence*!

```{r}
# 2.5 and 97.5 percentiles
qnorm(c(0.025, 0.975))
```

:::

::: {.column width="10%"}
	
:::

::: {.column width="45%"}


```{r}
vnorm(qnorm(c(0.025, 0.975)), section = "between") +
  annotate("text", x = 0, y = 0.2, label = "95%", 
           color = "white", size = 15) +
  labs(title = "Extracting a 95 Percent Interval",
       x = "z") +
  scale_x_continuous(breaks = c(-1.96, 1.96),
                     labels = c(-1.96, 1.96))
```

:::

::::


## Sample Proportion

::::: {.panel-tabset}

## Display

:::: {.columns}

::: {.column width="40%"}
```{r}
#| echo: false
#| eval: true
pulse_df |>
  tabyl(ghosts) |>
  adorn_totals("row") |>
  adorn_pct_formatting()
```

$$\hat{p} = 0.379$$
$$n = 1000$$

:::

::: {.column width="10%"}
	
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| eval: true

title_string <- "<span style = 'color:#23b63c'>Believes that Ghosts Exist</span><br>versus<br><span style = 'color:#ea0000'>Doesn't Believe that Ghosts Exist</span>"

pulse_df |>
  ggplot() +
  geom_bar(aes(x = ghosts, fill = ghosts)) +
  annotate("text", x = c("No", "Yes"), y = c(310, 170), 
           label = c("62%", "38%"), 
           color = "white", size = 15) +
  labs(title = title_string,
       caption = "SML 201") +
  scale_fill_manual(values = c("#ea0000", "#23b63c")) +
  theme_minimal() +
  theme(legend.position = "none",
        plot.title = element_markdown(hjust = 0.5,
                                      face = "bold",
                                      size = 20))
```

:::

::::

## Code

```{r}
#| echo: true
#| eval: false

pulse_df |>
  tabyl(ghosts) |>
  adorn_totals("row") |>
  adorn_pct_formatting()

title_string <- "<span style = 'color:#23b63c'>Believes that Ghosts Exist</span><br>versus<br><span style = 'color:#ea0000'>Doesn't Believe that Ghosts Exist</span>"

pulse_df |>
  ggplot() +
  geom_bar(aes(x = ghosts, fill = ghosts)) +
  annotate("text", x = c("No", "Yes"), y = c(310, 170), 
           label = c("62%", "38%"), 
           color = "white", size = 15) +
  labs(title = title_string,
       caption = "SML 201") +
  scale_fill_manual(values = c("#ea0000", "#23b63c")) +
  theme_minimal() +
  theme(legend.position = "none",
        plot.title = element_markdown(hjust = 0.5,
                                      face = "bold",
                                      size = 20))
```

:::::


## Confidence Interval for a Proportion

::::: {.panel-tabset}

## Math

$$\hat{p} \pm E, \quad\text{where } E = z_{\alpha/2}*\sqrt{\frac{\hat{p}(1 - \hat{p})}{n}} \text{ and } z_{\alpha/2} \approx 1.96$$

$$\left(0.3489, 0.4091\right)$$

*We are 95 percent confident* that the **true population proportion** of Americans that believe in ghosts is in between 34.89 and 40.91 percent.

## R

```{r}
# sample statistics
phat <- mean(pulse_df$ghosts == "Yes")
n <- sum(!is.na(pulse_df$ghosts))

# margin of error
E <- qnorm(0.975)*sqrt((phat*(1-phat))/n)

# confidence interval
phat + c(-1,1)*E
```

:::::


## Scenario: How Old Are You?

:::: {.columns}

::: {.column width="45%"}
![Dana Barrett](Dana_Barrett.png)
:::

::: {.column width="10%"}
	
:::

::: {.column width="45%"}
Among the people that believe in ghosts, how old are you?
:::

::::


::::: {.panel-tabset}

## Display

:::: {.columns}

::: {.column width="40%"}
```{r}
#| echo: false
#| eval: true

pulse_df |>
  group_by(ghosts) |>
  summarize(xbar = mean(age, na.rm = TRUE),
            n = n())
```	

$$\bar{x} \approx 47.9525$$
$$n = 379$$

:::

::: {.column width="10%"}
	
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| eval: true
title_string <- "<span style = 'color:#23b63c'>Believes that Ghosts Exist</span><br>versus<br><span style = 'color:#ea0000'>Doesn't Believe that Ghosts Exist</span>"

pulse_df |>
  ggplot() +
  geom_density(aes(x = age, fill = ghosts),
               alpha = 0.5) +
  labs(title = title_string,
       caption = "SML 201") +
  scale_fill_manual(values = c("#ea0000", "#23b63c")) +
  theme_minimal() +
  theme(legend.position = "none",
        plot.title = element_markdown(hjust = 0.5,
                                      face = "bold",
                                      size = 20))
```

:::

::::

## Code

```{r}
#| echo: true
#| eval: false

pulse_df |>
  group_by(ghosts) |>
  summarize(xbar = mean(age, na.rm = TRUE),
            n = n())

title_string <- "<span style = 'color:#23b63c'>Believes that Ghosts Exist</span><br>versus<br><span style = 'color:#ea0000'>Doesn't Believe that Ghosts Exist</span>"

pulse_df |>
  ggplot() +
  geom_density(aes(x = age, fill = ghosts),
               alpha = 0.5) +
  labs(title = title_string,
       caption = "SML 201") +
  scale_fill_manual(values = c("#ea0000", "#23b63c")) +
  theme_minimal() +
  theme(legend.position = "none",
        plot.title = element_markdown(hjust = 0.5,
                                      face = "bold",
                                      size = 20))
```

:::::


## Confidence Interval for a Mean

::::: {.panel-tabset}

## Math

$$\bar{x} \pm E, \quad\text{where } E = t_{\alpha/2}*\frac{s}{n}$$

$$\left(46.3651, 49.5399\right)$$

*We are 95 percent confident* that the **true population mean** age for people that believe ghosts exist is in between 46.37 and 49.54 years old.

## R

```{r}
# subset
ghosts_yes <- pulse_df |> filter(ghosts == "Yes")

# sample statistics
xbar <- mean(ghosts_yes$age, na.rm = TRUE)
s <- sd(ghosts_yes$age, na.rm = TRUE)
n <- sum(!is.na(ghosts_yes$age))

# margin of error (here: "df" are degrees of freedom)
E <- qt(0.975, df = n - 1)*s/sqrt(n)

# confidence interval
xbar + c(-1,1)*E
```

:::::

## Student t Distribution

::::: {.panel-tabset}

## Idea

The **Student t distribution** is an abstraction of the standard normal distribution that adjusts with wider tails to allow for more probability in the tails

![t distribution](t_distribution_bell_curves.png)

## Gosset

![William Sealy Gosset](William_Sealy_Gosset.png)

## df

In advanced statistics, such as the adjusted $R^{2}$ calculation for the coefficient of determination, the **degrees of freedom** are the difference between

* number of observations in the data
* number of independent variables being modeled

For this setting---estimating the true population mean---the degrees of freedom are simply

$$df = n - 1$$
:::::

::: {.callout-warning}
## Leaving the t distribution behind

For these calculations

$$\bar{x} \pm E, \quad\text{where } E = t_{\alpha/2}*\frac{s}{n}$$

* rely more on *summary statistics* rather than all of the gathered data
* "degrees of freedom" is a rather convoluted notion
* t-distribution is itself an approximation
* leads to more reliance on abstract probability distributions
* departs from frequentist probability philosophy
* more useful before calculators and computers
:::


# Modern Methods

::: {.callout-tip}
## infer

The developers of the `infer` package (and similar in other programming languages) streamlined coding syntax for these statistical tasks

* eases programming
* leverages *simulations*
:::


## Scenario: Princeton Politics

The survey question was

> On a scale of 0 to 100---with 0 = Democrat and 100 = Republican---where are your political leanings? 

## Bootstrap Distribution

```{r}
set.seed(201)
bootstrap_distribution <- demo_df |>
  specify(response = politics) |>
  generate(reps = 1000, type = "bootstrap") |>
  calculate(stat = "mean")
```

## Endpoints (Standard Error)

```{r}
xbar <- mean(demo_df$politics, na.rm = TRUE)
se_ci <- bootstrap_distribution |>
  get_confidence_interval(level = 0.95,
                          type = "se", 
                          point_estimate = xbar)
```

## Visualization

```{r}
bootstrap_distribution |>
  visualize() +
  shade_confidence_interval(endpoints = se_ci,
                            color = princeton_black,
                            fill = princeton_orange) +
  labs(title = "Political Leanings of Princeton Students",
       subtitle = "Fall 2024",
       caption = "SML 201",
       x = "0: Democrat ... 100: Republican") +
  theme_minimal() +
  xlim(0, 100)
```

## Inference

```{r}
print(round(se_ci))
```

In this survey question, "On a scale of 0 to 100---with 0 = Democrat and 100 = Republican---where are your political leanings?", *we are 95 percent confident* that the true population mean for Princeton students is in between 30 and 38.

::: {.callout-caution}
## Discussion

This was a survey among SML 201 students

* not a representative or random sample of Princeton students
* self-reported data
:::


## Scenario: Pineapple on Pizza

The sample proportions (among those who were adamant) were

```{r}
demo_df |>
  filter(pineapplePizza %in% c("No!", "Yes!")) |>
  tabyl(pineapplePizza) |>
  adorn_totals("row") |>
  adorn_pct_formatting()
```

## Bootstrap Distribution

```{r}
set.seed(201)
bootstrap_distribution <- demo_df |>
  filter(pineapplePizza %in% c("No!", "Yes!")) |>
  specify(response = pineapplePizza, success= "Yes!") |>
  generate(reps = 1000, type = "bootstrap") |>
  calculate(stat = "prop")
```

## Endpoints (Percentile)

Building the confidence interval from percentiles is perhaps more reasonable than using the standard errors (and less code too).

```{r}
per_ci <- bootstrap_distribution |>
  get_ci(level = 0.95, type = "percentile")
```

## Visualization

```{r}
bootstrap_distribution |>
  visualize() +
  shade_ci(per_ci, 
           color = princeton_black, fill = princeton_orange)
```

## Inference

```{r}
bootstrap_distribution |> get_ci()
```

Among the Princeton students who have a strong opinion on whether or not pineapple is a good pizza topping, *we are 95 percent confident* that the *true population proportion* of students who like pineapple on pizza is in between 44 and 67 percent. 

::: {.callout-caution}
## Discussion

This was a survey among SML 201 students

* relatively smaller sample size (n = 73 students)
* Since 0.5 is contained within the confidence interval, this result is not significally different than simply flipping a fair coin.
:::


# Theory

:::: {.columns}

::: {.column width="45%"}
![Peter Venkman](Peter_Venkman.png)
:::

::: {.column width="10%"}
	
:::

::: {.column width="45%"}
But why are we using careful language like "We are 95 percent confident ..."?
:::

::::

## Scenario: 20 Ghosts

:::: {.columns}

::: {.column width="25%"}
![Louis Tully](Louis_Tully.png)
:::

::: {.column width="5%"}
	
:::

::: {.column width="40%"}
Remember when we faced the **Dungeon Master** and their army of 20 ghosts?  Under the equal probabilities of a uniform distribution, we knew that we would face off against $\mu = 10.5$ ghosts, on average.	
:::

::: {.column width="5%"}
	
:::

::: {.column width="25%"}
![d20](d20_die.png)
:::

::::

## Experiment

:::: {.columns}

::: {.column width="30%"}
![Egon Spengler](Egon_Spengler.png)
:::

::: {.column width="10%"}
	
:::

::: {.column width="60%"}
We could *resample* the outcome space and see what proportion of confidence intervals capture the [population mean] ghost.
:::

::::

## Simulation

::::: {.panel-tabset}

## Animation

```{r}
#| echo: false
#| eval: false
#| message: false
#| warning: false
set.seed(201)
# d20
d20_df <- data.frame(d20_outcomes = 1:20)

# create data frame and allocate space
df_for_graph <- data.frame(
  id = 1:26,
  a = rep(NA, 26),
  b = rep(NA, 26),
  result = rep(NA, 26),
  result_color = rep(NA, 26)
)

for(i in 1:26){
  # bootstrap_distribution <- d20_df |>
  #   specify(response = d20_outcomes) |>
  #   generate(reps = 50, type = "bootstrap") |>
  #   calculate(stat = "mean")
  # CI <- bootstrap_distribution |> get_ci()
  
  this_sample <- sample(1:20, size = 10, replace = TRUE)
  xbar <- mean(this_sample)
  s <- sd(this_sample)
  n <- length(this_sample)
  E <- qt(0.975, df = n-1)*s/sqrt(n)
  
  
  # df_for_graph$a[i] <- unlist(CI[1])
  # df_for_graph$b[i] <- unlist(CI[2])
  df_for_graph$a[i] <- xbar - E
  df_for_graph$b[i] <- xbar + E
  df_for_graph$result[i] <- ifelse(
    df_for_graph$a[i] < 10.5 & 10.5 < df_for_graph$b[i],
    "captured",
    "not captured"
  )
  df_for_graph$result_color[i] <- ifelse(
    df_for_graph$a[i] < 10.5 & 10.5 < df_for_graph$b[i],
    "#23b63c",
    "#ea0000"
  )
  
  capture_rate <- mean(df_for_graph$result == "captured",
                       na.rm = TRUE)
  
  this_plot <- df_for_graph |>
    filter(id %in% 1:i) |>
    ggplot() +
    # geom_vline(aes(xintercept = 10.5), 
    #            color = "#ab9f8f", linewidth = 2) +
    geom_segment(aes(x = a, y = id, 
                     xend = b, yend = id,
                     color = result_color)) +
    geom_point(aes(x = a, y = id, color = result_color),
               size = 3) +
    geom_point(aes(x = b, y = id, color = result_color),
               size = 3) +
    geom_image(aes(x = 10.5, y = id),
               image = "ghostbusters_ghost.png") +
    labs(title = "Confidence Intervals",
         subtitle = paste0("capture rate: ",
                           round(100*capture_rate, 2),
                           " percent"),
         caption = "SML 201",
         x = "ghosts", y = "interval number") +
    scale_color_manual(values = c("#23b63c", "#ea0000")) +
    theme_minimal() +
    theme(legend.position = "none")
  
  ggsave(paste0("images/CI_plot", LETTERS[i], ".png"), this_plot)
}

png_files <- Sys.glob("images/CI_plot*.png")

gifski::gifski(
  png_files,
  "CI_animation.gif",    #output file name
  height = 1600, width = 1600, #you may change the resolution
  delay = 1/2                #seconds
)

```
![CI animation](CI_animation.gif)

## Code

```{r}
#| echo: true
#| eval: false
#| message: false
#| warning: false
set.seed(201)
# d20
d20_df <- data.frame(d20_outcomes = 1:20)

# create data frame and allocate space
df_for_graph <- data.frame(
  id = 1:26,
  a = rep(NA, 26),
  b = rep(NA, 26),
  result = rep(NA, 26),
  result_color = rep(NA, 26)
)

for(i in 1:26){
  # bootstrap_distribution <- d20_df |>
  #   specify(response = d20_outcomes) |>
  #   generate(reps = 50, type = "bootstrap") |>
  #   calculate(stat = "mean")
  # CI <- bootstrap_distribution |> get_ci()
  
  this_sample <- sample(1:20, size = 10, replace = TRUE)
  xbar <- mean(this_sample)
  s <- sd(this_sample)
  n <- length(this_sample)
  E <- qt(0.975, df = n-1)*s/sqrt(n)
  
  
  # df_for_graph$a[i] <- unlist(CI[1])
  # df_for_graph$b[i] <- unlist(CI[2])
  df_for_graph$a[i] <- xbar - E
  df_for_graph$b[i] <- xbar + E
  df_for_graph$result[i] <- ifelse(
    df_for_graph$a[i] < 10.5 & 10.5 < df_for_graph$b[i],
    "captured",
    "not captured"
  )
  df_for_graph$result_color[i] <- ifelse(
    df_for_graph$a[i] < 10.5 & 10.5 < df_for_graph$b[i],
    "#23b63c",
    "#ea0000"
  )
  
  capture_rate <- mean(df_for_graph$result == "captured",
                       na.rm = TRUE)
  
  this_plot <- df_for_graph |>
    filter(id %in% 1:i) |>
    ggplot() +
    # geom_vline(aes(xintercept = 10.5), 
    #            color = "#ab9f8f", linewidth = 2) +
    geom_segment(aes(x = a, y = id, 
                     xend = b, yend = id,
                     color = result_color)) +
    geom_point(aes(x = a, y = id, color = result_color),
               size = 3) +
    geom_point(aes(x = b, y = id, color = result_color),
               size = 3) +
    geom_image(aes(x = 10.5, y = id),
               image = "ghostbusters_ghost.png") +
    labs(title = "Confidence Intervals",
         subtitle = paste0("capture rate: ",
                           round(100*capture_rate, 2),
                           " percent"),
         caption = "SML 201",
         x = "ghosts", y = "interval number") +
    scale_color_manual(values = c("#23b63c", "#ea0000")) +
    theme_minimal() +
    theme(legend.position = "none")
  
  ggsave(paste0("images/CI_plot", LETTERS[i], ".png"), this_plot)
}

png_files <- Sys.glob("images/CI_plot*.png")

gifski::gifski(
  png_files,
  "CI_animation.gif",    #output file name
  height = 1600, width = 1600, #you may change the resolution
  delay = 1/2                #seconds
)

```


:::::












# Quo Vadimus?

:::: {.columns}

::: {.column width="40%"}
* Precept 7
* Coloring Assignment 2
* Project 3 (assigned Nov 11)
* Exam 2 (December 5)
:::

::: {.column width="10%"}
	
:::

::: {.column width="50%"}
![BOOlean logic](BOOlean_logic.png)

:::

::::


# Footnotes

::: {.callout-note collapse="true"}
## (optional) Additional Resources



:::

::: {.callout-note collapse="true"}
## Session Info

```{r}
sessionInfo()
```
:::


::: {.callout-note collapse="true"}
## Example Callout Block

`note`, `tip`, `warning`, `caution`, or `important`
:::


:::: {.columns}

::: {.column width="45%"}
	
:::

::: {.column width="10%"}
	
:::

::: {.column width="45%"}

:::

::::

::::: {.panel-tabset}



:::::