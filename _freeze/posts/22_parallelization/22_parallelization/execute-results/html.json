{
  "hash": "c5aa7daadd87dab8ba70631fc7f9b247",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"22: Parallelization\"\nauthor: \"Derek Sollberger\"\ndate: \"2024-11-26\"\nformat:\n  html:\n    toc: true\n    theme: cerulean\n---\n\n\n\n# SML 201\n\n## Start\n\n::: {.callout-note collapse=\"true\"}\n## Libraries and Loading the Data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"janitor\")\nlibrary(\"future\")\nlibrary(\"parallel\")\nlibrary(\"tidymodels\")\nlibrary(\"tidyverse\") #general framework for data wrangling\n\n# school colors\nprinceton_orange <- \"#E77500\"\nprinceton_black  <- \"#121212\"\n\nloan_raw <- readr::read_csv(\"loan_data_set.csv\") |>\n  janitor::clean_names()\n```\n:::\n\n\n\n:::\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n* **Goal**: \"Take out the Cheese\" Day\n\n\n:::\n\n::: {.column width=\"10%\"}\n\n:::\n\n::: {.column width=\"40%\"}\n* **Objectives**: \n\n- Shapiro-Wilk test\n- Logistic regression revisited\n- Parallelization\n\n:::\n\n::::\n\n## Data: Home Loans\n\n\"Dream Housing Finance company deals in all home loans. They have presence across all urban, semi urban and rural areas. Customer first apply for home loan after that company validates the customer eligibility for loan.\"\t\n\n* Source: [Kaggle](https://www.kaggle.com/datasets/burak3ergun/loan-data-set)\n\n### Explanatory Variables\n\n* Gender (of primary applicant)\n* Marital status (of primary applicant)\n* Dependents \n* Education\n* Self-employed\n* Applicant income (monthly, in dollars)\n* Co-applicant income (monthly, in dollars)\n* loan amount terms (in months)\n* Credit history\n* Property area\n\n### Cleaning\n\n* remove rows that have missing values in the response variable (`loan_amount`)\n* convert `dependents` to a numerical variable\n\n    * here, replace \"+\" with nothing\n\n* combine \"income\" columns\n\n    * ensure all dollar amounts are in the same units (thousands of dollars)\n\n* convert `credit_history` to a factor variable (i.e. categorical)\n\n* retain relevant columns\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nloan_df <- loan_raw |>\n  filter(!is.na(loan_amount)) |>\n  mutate(dependents_num = as.numeric(\n    str_replace(dependents, \"\\\\+\", \"\")\n  )) |>\n  mutate(income = applicant_income/1000 + coapplicant_income/1000) |>\n  mutate(credit_history = factor(credit_history)) |>\n  select(loan_amount, income, dependents_num, gender, married, education, self_employed, credit_history, property_area, loan_status) |>\n  mutate(approved = ifelse(loan_status == \"Y\", 1, 0),\n         approved_fac = factor(approved,\n                               levels = c(0,1))) |>\n  select(loan_amount, income, dependents_num, gender, married, education, self_employed, credit_history, property_area, approved_fac)\n```\n:::\n\n\n\n\n# Normality\n\nHistorically, several concepts in statistics relied on the *assumption* that data were normally distributed.  So, how do we check if our data is normally distributed?\n\n## QQ Plots\n\nOne way is to construct **quantile-quantile plots**.  Let us proceed with some more [ggplot] tech.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nloan_df |>\n  ggplot(aes(sample = loan_amount)) +\n  stat_qq() +\n  stat_qq_line() +\n  labs(title = \"QQ Plot\",\n       subtitle = \"Loan Amount looks to be normally distributed\\nexcept for higher level amounts\",\n       caption = \"Source: Dream House Finance\",\n       x = \"quantile 1\", y = \"quantile 2\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](22_parallelization_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nloan_df |>\n  ggplot(aes(sample = log(loan_amount))) +\n  stat_qq() +\n  stat_qq_line() +\n  labs(title = \"QQ Plot\",\n       subtitle = \"Log loan amount looks to be normally distributed\\nexcept for the tails\",\n       caption = \"Source: Dream House Finance\",\n       x = \"quantile 1\", y = \"quantile 2\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](22_parallelization_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\nThis could also be shown in groups.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nloan_df |>\n  ggplot(aes(sample = log(loan_amount),\n             color = factor(approved_fac))) +\n  stat_qq() +\n  stat_qq_line() +\n  labs(title = \"QQ Plot\",\n       subtitle = \"Log loan amount looks to be normally distributed\\nexcept for the tails\",\n       caption = \"Source: Dream House Finance\",\n       x = \"quantile 1\", y = \"quantile 2\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](22_parallelization_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n\n## Shapiro-Wilk Test\n\n* null hypothesis: data is normally distributed\n* alternative hypothesis: data is not normally distributed\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstats::shapiro.test(loan_df$loan_amount)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tShapiro-Wilk normality test\n\ndata:  loan_df$loan_amount\nW = 0.76752, p-value < 2.2e-16\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstats::shapiro.test(log(loan_df$loan_amount))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tShapiro-Wilk normality test\n\ndata:  log(loan_df$loan_amount)\nW = 0.9633, p-value = 5.357e-11\n```\n\n\n:::\n:::\n\n\n\n\n# Logistic Regression (in tidymodels)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# cross-validation folds\nloan_cv <- vfold_cv(loan_df, v = 10)\n\n# specification (penalized logistic regression)\nloan_spec <- logistic_reg(penalty = tune(), \n                          mixture = 0) |>\n  set_engine(\"glmnet\")\n\n# recipe\nloan_recipe <- recipe(approved_fac ~ .,\n                      data = loan_df) |>\n  step_novel(all_nominal_predictors()) |>\n  step_dummy(all_nominal_predictors()) |>\n  step_zv(all_predictors()) |>\n  step_normalize(all_predictors())\n\n# workflow\nloan_workflow <- workflow(loan_recipe, loan_spec)\n\n# parameter grid\nlambda_grid <- grid_regular(penalty(range = c(-3, 3)),\n                            levels = 50)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstart_time <- Sys.time()\n\nfuture::plan(multisession, workers = 1)\n\ntune_results <- tune_grid(\n  loan_workflow,\n  resamples = loan_cv,\n  grid = lambda_grid,\n)\n\nbrute_force_time <- Sys.time() - start_time\n```\n:::\n\n\n\n## Parallelization\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nparallel::detectCores()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 16\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstart_time <- Sys.time()\n\nfuture::plan(multisession, workers = 5)\n\ntune_results <- tune_grid(\n  loan_workflow,\n  resamples = loan_cv,\n  grid = lambda_grid\n)\n\nparallelization_time <- Sys.time() - start_time\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(\"The brute force time was\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"The brute force time was\"\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(brute_force_time)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nTime difference of 2.115917 secs\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(\"The parallelized processing time was\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"The parallelized processing time was\"\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(parallelization_time)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nTime difference of 10.53473 secs\n```\n\n\n:::\n:::\n\n\n\n\n\n\n# Quo Vadimus?\n\n:::: {.columns}\n\n::: {.column width=\"40%\"}\n* Exam 2 (December 5)\n:::\n\n::: {.column width=\"10%\"}\n\t\n:::\n\n::: {.column width=\"50%\"}\n\n\n:::\n\n::::\n\n\n# Footnotes\n\n::: {.callout-note collapse=\"true\"}\n## (optional) Additional Resources\n\n* more about [normality tests in R](https://userconf2024.sched.com/event/1c8uW/a-comprehensive-list-of-normality-tests-in-r-fernando-correa-curso-r) by Fernando \"Curso-R\" Correa\n\n:::\n\n::: {.callout-note collapse=\"true\"}\n## Session Info\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 10 x64 (build 19045)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] parallel  stats     graphics  grDevices utils     datasets  methods  \n[8] base     \n\nother attached packages:\n [1] glmnet_4.1-8       Matrix_1.7-0       lubridate_1.9.3    forcats_1.0.0     \n [5] stringr_1.5.1      readr_2.1.5        tidyverse_2.0.0    yardstick_1.3.1   \n [9] workflowsets_1.1.0 workflows_1.1.4    tune_1.2.1         tidyr_1.3.1       \n[13] tibble_3.2.1       rsample_1.2.1      recipes_1.0.10     purrr_1.0.2       \n[17] parsnip_1.2.1      modeldata_1.4.0    infer_1.0.7        ggplot2_3.5.1     \n[21] dplyr_1.1.4        dials_1.3.0        scales_1.3.0       broom_1.0.7       \n[25] tidymodels_1.2.0   future_1.33.2      janitor_2.2.0     \n\nloaded via a namespace (and not attached):\n [1] rlang_1.1.4         magrittr_2.0.3      snakecase_0.11.1   \n [4] furrr_0.3.1         compiler_4.4.1      vctrs_0.6.5        \n [7] lhs_1.2.0           pkgconfig_2.0.3     shape_1.4.6.1      \n[10] crayon_1.5.3        fastmap_1.2.0       backports_1.5.0    \n[13] ellipsis_0.3.2      labeling_0.4.3      utf8_1.2.4         \n[16] rmarkdown_2.29      prodlim_2024.06.25  tzdb_0.4.0         \n[19] bit_4.5.0           xfun_0.48           jsonlite_1.8.8     \n[22] R6_2.5.1            stringi_1.8.4       parallelly_1.37.1  \n[25] rpart_4.1.23        Rcpp_1.0.12         iterators_1.0.14   \n[28] knitr_1.49          future.apply_1.11.2 splines_4.4.1      \n[31] nnet_7.3-19         timechange_0.3.0    tidyselect_1.2.1   \n[34] rstudioapi_0.17.1   yaml_2.3.8          timeDate_4032.109  \n[37] codetools_0.2-20    listenv_0.9.1       lattice_0.22-6     \n[40] withr_3.0.2         evaluate_1.0.1      archive_1.1.8      \n[43] survival_3.6-4      pillar_1.9.0        foreach_1.5.2      \n[46] generics_0.1.3      vroom_1.6.5         hms_1.1.3          \n[49] munsell_0.5.1       globals_0.16.3      class_7.3-22       \n[52] glue_1.8.0          tools_4.4.1         data.table_1.16.2  \n[55] gower_1.0.1         grid_4.4.1          ipred_0.9-14       \n[58] colorspace_2.1-1    cli_3.6.3           DiceDesign_1.10    \n[61] fansi_1.0.6         lava_1.8.0          doFuture_1.0.1     \n[64] gtable_0.3.6        GPfit_1.0-8         digest_0.6.35      \n[67] htmlwidgets_1.6.4   farver_2.1.2        htmltools_0.5.8.1  \n[70] lifecycle_1.0.4     hardhat_1.4.0       bit64_4.5.2        \n[73] MASS_7.3-60.2      \n```\n\n\n:::\n:::\n\n\n:::\n\n\n::: {.callout-note collapse=\"true\"}\n## Example Callout Block\n\n`note`, `tip`, `warning`, `caution`, or `important`\n:::\n\n\n:::: {.columns}\n\n::: {.column width=\"45%\"}\n\t\n:::\n\n::: {.column width=\"10%\"}\n\t\n:::\n\n::: {.column width=\"45%\"}\n\n:::\n\n::::\n\n::::: {.panel-tabset}\n\n\n\n:::::",
    "supporting": [
      "22_parallelization_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}