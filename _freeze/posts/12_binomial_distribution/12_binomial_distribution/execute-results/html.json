{
  "hash": "98a67bc0fb1a301f6f563f1c2c24591c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"12: Binomial Distribution\"\nauthor: \"Derek Sollberger\"\ndate: \"2024-10-22\"\nformat:\n  html:\n    toc: true\n    theme: cerulean\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"gt\")        #great tables\nlibrary(\"patchwork\") #easy side-by-side plots\nlibrary(\"tidyverse\") #tools for data wrangling and visualization\n\n# school colors\nprinceton_orange <- \"#E77500\"\nprinceton_black  <- \"#121212\"\n```\n:::\n\n\n\n\n# SML 201\n\n## Start\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n* **Goal**: Introduce concepts of probability\n\n* **Objective**: Compute probabilities with the discrete binomial distribution\n:::\n\n::: {.column width=\"10%\"}\n\n:::\n\n::: {.column width=\"40%\"}\n\n\n:::\n\n::::\n\n\n# Brief History of Probability\n\n## Terminology\n\n::::: {.panel-tabset}\n\n## Definition\n\nFor event $X$ with outcomes $x$, the probability $P(x)$ has properties\n\n* each probability is between zero and one (inclusive inequalities)\n\n$$0 \\leq P(x) \\leq 1$$\n\n* all probabilities add up to one (i.e. 100 percent)\n\n$$\\sum_{x \\in X} P(x) = 1$$\n\n## Fork\n\nIf a pair of parents have two children, should the genders of the children be represented as\n\n> {two girls, mixed, two boys}\n\nOR\n\n> {{girl, girl}, {girl, boy}, {boy, girl}, {boy, boy}}\n\n## Frameworks\n\n* Classical probability: fraction from known observations\n\n    * example: With two children, the probability of having one girl and one boy is $\\frac{2}{4}$\n    \n* **Frequentist probability**: If we could repeat an experiment infinitely many iterations, what would the proportion be?\n\n    * example: Surveying all families with multiple children, among the first two children, the probability of having one girl and one boy is converging toward 50 percent.\n    * SML 201\n    \n* Bayesian probability: A posterior distribution is the update from multiplying likelihoods to the prior distribution.\n\n    * example: If the first child is a girl, what is the probability that the second child is a boy?\n    * SML 320\n\n:::::\n\n## Coins\n\n::::: {.panel-tabset}\n\n## Fair Coin\n\nFor a flip of a fair coin, the probability of observing \"Heads\" is 50 percent.  The complement, observing \"Tails\", also has a probability of 50 percent.\n\n$$P(H) = 0.50, \\quad P(T) = 0.50$$\n![coins](onecoin.png)\n\n## 3 Coins\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nc(\"HHH\", \"THH\", \"HTH\", \"TTH\", \"HHT\", \"THT\", \"HTT\", \"TTT\")\n```\n\n\n:::\n:::\n\n\n\n## 4 Coins\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nc(\"HHHH\", \"THHH\", \"HTHH\", \"TTHH\", \"HHTH\", \"THTH\", \"HTTH\", \"TTTH\", \n\"HHHT\", \"THHT\", \"HTHT\", \"TTHT\", \"HHTT\", \"THTT\", \"HTTT\", \"TTTT\"\n)\n```\n\n\n:::\n:::\n\n\n\n## 5 Coins\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nc(\"HHHHH\", \"THHHH\", \"HTHHH\", \"TTHHH\", \"HHTHH\", \"THTHH\", \"HTTHH\", \n\"TTTHH\", \"HHHTH\", \"THHTH\", \"HTHTH\", \"TTHTH\", \"HHTTH\", \"THTTH\", \n\"HTTTH\", \"TTTTH\", \"HHHHT\", \"THHHT\", \"HTHHT\", \"TTHHT\", \"HHTHT\", \n\"THTHT\", \"HTTHT\", \"TTTHT\", \"HHHTT\", \"THHTT\", \"HTHTT\", \"TTHTT\", \n\"HHTTT\", \"THTTT\", \"HTTTT\", \"TTTTT\")\n```\n\n\n:::\n:::\n\n\n\n## Code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 3 coins\ncoin <- c(\"H\", \"T\")\ndf <- data.frame(expand.grid(coin, coin, coin)) |>\n  tidyr::unite(\"obs\", c(\"Var1\", \"Var2\", \"Var3\"),\n               sep = \"\", remove = FALSE)\ndput(df$obs)\n\n# 4 coins\ndf <- data.frame(expand.grid(coin, coin, coin, coin)) |>\n  tidyr::unite(\"obs\", c(\"Var1\", \"Var2\", \"Var3\", \"Var4\"),\n               sep = \"\", remove = FALSE)\ndput(df$obs)\n\n# 5 coins\ndf <- data.frame(expand.grid(coin, coin, coin, coin, coin)) |>\n  tidyr::unite(\"obs\", c(\"Var1\", \"Var2\", \"Var3\", \"Var4\", \"Var5\"),\n               sep = \"\", remove = FALSE)\ndput(df$obs)\n```\n:::\n\n\n\n## Exactly\n\n* Example: For 6 coin flips, in how many permutations do we observe exactly 2 heads?\n\n* one instance:\n\n$${H, H, T, T, T, T}$$\n\n* answer:\n\n$$\\frac{6!}{2!4!} = 15$$\n\n:::::\n\n\n## Choose\n\n::::: {.panel-tabset}\n\n## Definition\n\n:::: {.columns}\n\n\n::: {.column width=\"67%\"}\n$$\\binom{n}{k} = \\frac{n!}{k!(n-k)!}$$\n\n- said ``n choose k''\n- note $0! = 1$ (to avoid dividing by zero)\n:::\n\n::: {.column width=\"33%\"}\n![from The Simpsons](choochoochooseyou.png)\n:::\n\n::::\n\n## Discussion\n\n:::: {.columns}\n\n\n::: {.column width=\"67%\"}\n* In SML 201, you will never be directly asked for the distinction between \n\n    * **permutations**: number of arrangements when order matters\n    * **combinations**: number of arrangements when order does not matter\n    \n* Example: To open a *combination* lock, you need to apply the correct *permutation*\n\n* But $\\binom{n}{k}$ is \"nCr\" on a calculator!\n\n    * This choose operator keeps track of the number of permutations in a certain combination\n:::\n\n::: {.column width=\"33%\"}\n![combination lock](combination_lock.png)\n:::\n\n::::\n\n## Binomial Distribution\n\n$$P(x = k) = \\binom{n}{k} p^{k}(1-p)^{n-k}$$\n\n- $0 \\leq k \\leq n$, where $n$ and $k$ are whole numbers\n- $0 \\leq p \\leq 1$\n\n:::::\n\n\n# dbinom\n\n## Example: Squirtle\n\n::::: {.panel-tabset}\n\n## Setup\n\n:::: {.columns}\n\n::: {.column width=\"45%\"}\nHistorically, Squirtle defeats Charizard 32\\% of the time.  If there are 5 battles, what is the probability that Squirtle wins exactly 2 times?\t\n:::\n\n::: {.column width=\"10%\"}\n\t\n:::\n\n::: {.column width=\"45%\"}\n![Squirtle the underdog](charizard.png)\n:::\n\n::::\n\n## Battle Arena\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nc(\"SSSSS\", \"CSSSS\", \"SCSSS\", \"CCSSS\", \"SSCSS\", \"CSCSS\", \"SCCSS\", \n\"CCCSS\", \"SSSCS\", \"CSSCS\", \"SCSCS\", \"CCSCS\", \"SSCCS\", \"CSCCS\", \n\"SCCCS\", \"CCCCS\", \"SSSSC\", \"CSSSC\", \"SCSSC\", \"CCSSC\", \"SSCSC\", \n\"CSCSC\", \"SCCSC\", \"CCCSC\", \"SSSCC\", \"CSSCC\", \"SCSCC\", \"CCSCC\", \n\"SSCCC\", \"CSCCC\", \"SCCCC\", \"CCCCC\")\n```\n\n\n:::\n:::\n\n\n\n\n* But these observations have different weights!\n* The outcomes are not uniformly distributed\n\n## Math\n\n$$P(k = 2) = \\overbrace{\\binom{5}{2}}^{\\text{number of permutations}}\\underbrace{(0.32)^{2}}_{\\text{Squirtle wins}}\\overbrace{(0.68)^{3}}^{\\text{Charizard wins}}$$\n\n\n\n## R\n\nHistorically, Squirtle defeats Charizard 32\\% of the time.  If there are 5 battles, what is the probability that Squirtle wins exactly 2 times?\t\n\n* $n = 5$\n* $k = 2$\n* $p = 0.32$\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndbinom(2, 5, 0.32)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.3219784\n```\n\n\n:::\n:::\n\n\n\n\n## Distribution\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nk_obs <- 2\nn     <- 5\np     <- 0.32\nlabels <- TRUE\n\n# make data frame\nk_vals <- 0:n\npk     <- dbinom(k_vals, n, p)\nk_bool <- k_vals %in% k_obs\ndf_binom <- data.frame(k_vals, pk, k_bool)\n\n# compute requested probability\nanswer_prob = round(sum(dbinom(k_obs, n, p)), 4)\n\n# define bar plot\nthis_plot <- if(labels){\n  df_binom |>\n    ggplot(aes(x = factor(k_vals), y = pk, color = k_bool, fill = k_bool)) +\n    geom_bar(stat = \"identity\") +\n    geom_label(aes(x = factor(k_vals), y = pk, label = round(pk, 4)),\n               color = \"black\", fill = \"white\") +\n    labs(subtitle = paste0(\"n = \", n, \", k = \", list(k_obs), \", p = \", p, \", P(k = \", list(k_obs), \") = \", answer_prob),\n         caption = \"SML 201\",\n         y = \"probability\") +\n    theme(\n      legend.position = \"bottom\",\n      panel.background = element_blank()\n    )\n} else{\n  df_binom |>\n    ggplot(aes(x = factor(k_vals), y = pk, color = k_bool, fill = k_bool)) +\n    geom_bar(stat = \"identity\") +\n    labs(subtitle = paste0(\"n = \", n, \", k = \", list(k_obs), \", p = \", p, \", P(k = \", list(k_obs), \") = \", answer_prob),\n         caption = \"SML 201\",\n         y = \"probability\") +\n    theme(\n      legend.position = \"bottom\",\n      panel.background = element_blank()\n    )\n}\n\n# plot bar chart\nthis_plot +\n  \n  # particular to this example\n  scale_color_manual(values = c(\"black\", \"#ca7721\")) +\n  scale_fill_manual(values = c(\"gray70\", \"#297383\")) +\n  labs(title = \"Squirtle Wins\", \n       x = \"wins\", y = \"probability\")\n```\n\n::: {.cell-output-display}\n![](12_binomial_distribution_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n:::::\n\n\n## Example: Charizard\n\n::::: {.panel-tabset}\n\n## Setup\n\n:::: {.columns}\n\n::: {.column width=\"45%\"}\nHistorically, Charizard defeats Squirtle 68\\% of the time.  If there are 5 battles, what is the probability that Charizard wins exactly 3 times?\t\n:::\n\n::: {.column width=\"10%\"}\n\t\n:::\n\n::: {.column width=\"45%\"}\n![Charizard the favored](charizard.png)\n:::\n\n::::\n\n## Math\n\n$$P(k = 3) = \\overbrace{\\binom{5}{3}}^{\\text{number of permutations}}\\underbrace{(0.68)^{3}}_{\\text{Charizard wins}}\\overbrace{(0.32)^{2}}^{\\text{Squirtle wins}}$$\n\n## R\n\nHistorically, Charizard defeats Squirtle 68\\% of the time.  If there are 5 battles, what is the probability that Charizard wins exactly 3 times?\t\n\n* $n = 5$\n* $k = 3$\n* $p = 0.68$\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndbinom(3, 5, 0.68)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.3219784\n```\n\n\n:::\n:::\n\n\n\n## Function\n\nLet us make a *user-defined function* to help us *visualize* the binomial distribution in the future.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvbinom <- function(k_obs, n, p, labels = TRUE){\n# make data frame\nk_vals <- 0:n\npk     <- dbinom(k_vals, n, p)\nk_bool <- k_vals %in% k_obs\ndf_binom <- data.frame(k_vals, pk, k_bool)\n\n# compute requested probability\nanswer_prob = round(sum(dbinom(k_obs, n, p)), 4)\n\n# define bar plot\nthis_plot <- if(labels){\n  df_binom |>\n    ggplot(aes(x = factor(k_vals), y = pk, color = k_bool, fill = k_bool)) +\n    geom_bar(stat = \"identity\") +\n    geom_label(aes(x = factor(k_vals), y = pk, label = round(pk, 4)),\n               color = \"black\", fill = \"white\") +\n    labs(subtitle = paste0(\"n = \", n, \", k = \", list(k_obs), \", p = \", p, \", P(k = \", list(k_obs), \") = \", answer_prob),\n         caption = \"SML 201\",\n         y = \"probability\") +\n    theme(\n      legend.position = \"bottom\",\n      panel.background = element_blank()\n    )\n} else{\n  df_binom |>\n    ggplot(aes(x = factor(k_vals), y = pk, color = k_bool, fill = k_bool)) +\n    geom_bar(stat = \"identity\") +\n    labs(subtitle = paste0(\"n = \", n, \", k = \", list(k_obs), \", p = \", p, \", P(k = \", list(k_obs), \") = \", answer_prob),\n         caption = \"SML 201\",\n         y = \"probability\") +\n    theme(\n      legend.position = \"bottom\",\n      panel.background = element_blank()\n    )\n}\n\n# plot bar chart\nthis_plot\n}\n```\n:::\n\n\n\n## Distribution\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvbinom(3, 5, 0.68) +\n  # particular to this example\n  scale_color_manual(values = c(\"black\", \"#297383\")) +\n  scale_fill_manual(values = c(\"gray70\", \"#ca7721\")) +\n  labs(title = \"Charizard Wins\", \n       x = \"wins\", y = \"probability\")\n```\n\n::: {.cell-output-display}\n![](12_binomial_distribution_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n:::::\n\n\n# Symmetry\n\n::::: {.panel-tabset}\n\n## Examples\n\nIn the previous examples, we saw that\n\n$$\\begin{array}{rcl}\n  \\binom{5}{2}(0.32)^{2}(0.68)^{3} & = & \\binom{5}{3}(0.68)^{3}(0.32)^{2} \\\\\n  \\binom{5}{2} & = & \\binom{5}{3} \\\\\n  10 & = & 10 \\\\\n\\end{array}$$\n\n## Proof\n\n**Claim**:  \n\n$$\\binom{n}{k} = \\binom{n}{n-k}$$\n\n**Proof**:\n\n$$\\binom{n}{n-k} = \\frac{n!}{(n-k)!(n - (n-k))!} = \\frac{n!}{(n-k)!k!} = \\frac{n!}{k!(n-k)!} = \\binom{n}{k}$$\n\n## Pascal\n\n:::: {.columns}\n\n::: {.column width=\"45%\"}\n![choose operator](choose_pascal_1.png)\n:::\n\n::: {.column width=\"10%\"}\n\t\n:::\n\n::: {.column width=\"45%\"}\n![Pascal's Triangle](choose_pascal_2.png)\n:::\n\n::::\n\n* Images credit: Go Figure Math\n\n## Usage\n\nFor the binomial distribution\n\n$$P(x = k) = \\binom{n}{k} p^{k}(1-p)^{n-k}$$\n\n* $n$ trials\n* observing $k$ of that event\n* population proportion $p$\n* complement probability $1-p$\n\nIn a binomial setup (e.g. {success, failure}), it does not matter which label is associated with $p$ and $k$ as long as the rest of the task is presented consistently.\n\n:::: {.columns}\n\n::: {.column width=\"45%\"}\nSquirtle wins:\n\n* $k = 2$\n* $p = 0.32$\n* $1 - p = 0.68$\n:::\n\n::: {.column width=\"10%\"}\n\t\n:::\n\n::: {.column width=\"45%\"}\nCharizard wins:\n\n* $k = 3$\n* $p = 0.68$\n* $1 - p = 0.32$\n:::\n\n::::\n\n:::::\n\n# Skew\n\n::::: {.panel-tabset}\n\n## Definition\n\nIn probability, the *skew* of a distribution is the measurement of how asymmetric the distribution is.  Loosely speaking, graphs of distributions are described by which tail---left or right---is more stretched away from the mode.\n\n## Example\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np1 <- vbinom(2,5,0.32, labels = FALSE) + labs(title = \"Right Skew\")\np2 <- vbinom(3,5,0.68, labels = FALSE) + labs(title = \"Left Skew\")\n\n# patchwork\np1 + p2\n```\n\n::: {.cell-output-display}\n![](12_binomial_distribution_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\n## Discussion\n\nAn old definition of skewness was\n\n$$(\\mu - \\nu) / \\sigma$$\n\n* $\\mu$: mean\n* $\\nu$: median\n* $\\sigma$: standard deviation\n\nwith then\n\n* right skew: mean > median\n* left skew: mean < median\n\nHowever this definition has been [debunked](https://en.wikipedia.org/wiki/Skewness) in the past couple of decades\n\n* We tend to discuss distribution skew in a subjective way rather than rigorous way.\n\n:::::\n\n\n# pbinom\n\n## Example: Boba\n\n::::: {.panel-tabset}\n\n## Setup\n\n:::: {.columns}\n\n::: {.column width=\"45%\"}\nThere are 4 parking spaces in front of the boba place.  Suppose that each parking space tends to be occupied about 57 percent of the time.\t\n:::\n\n::: {.column width=\"10%\"}\n\t\n:::\n\n::: {.column width=\"45%\"}\n![boba!](boba.png)\n:::\n\n::::\n\n## Exactly\n\nThere are 4 parking spaces in front of the boba place.  Suppose that each parking space tends to be occupied about 57 percent of the time.\tWhat is the probability that *exactly 3* of the parking spaces are open?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndbinom(3, 4, 0.43)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.181276\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nvbinom(3, 4, 0.43) +\n  labs(title = \"Exactly 3 parking spaces\",\n       x = \"open parking spaces\")\n```\n\n::: {.cell-output-display}\n![](12_binomial_distribution_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n\n## At Most\n\nThere are 4 parking spaces in front of the boba place.  Suppose that each parking space tends to be occupied about 57 percent of the time.\tWhat is the probability that *at most 2* of the parking spaces are open?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(dbinom(0:2, 4, 0.43))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.784536\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nvbinom(0:2, 4, 0.43) +\n  labs(title = \"Probability of at most 2 open parking spaces\",\n       x = \"open parking spaces\")\n```\n\n::: {.cell-output-display}\n![](12_binomial_distribution_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npbinom(2, 4, 0.43) #same as sum(dbinom(0:2, 4, 0.43))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.784536\n```\n\n\n:::\n:::\n\n\n\n:::::\n\n## Cumulative Probability\n\nThe `pbinom` function in `R` computes a cumulative probability (i.e. adds up probabilities).\n\n$$P(i \\leq k) = \\sum_{i = 1}^{k}\\binom{n}{i}p^{i}(1-p)^{n-i}$$\n\nIn `R`,\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npbinom(k, n, p)\n# is the same as\nsum(dbinom(0:k, n, p))\n```\n:::\n\n\n\n\n## Example: Parking\n\n::::: {.panel-tabset}\n\n## Setup\n\n:::: {.columns}\n\n::: {.column width=\"45%\"}\nThere are 32 parking spaces on a certain stretch of Nassau Street.  Suppose that each parking space tends to be occupied about 81 percent of the time.\t\n:::\n\n::: {.column width=\"10%\"}\n\t\n:::\n\n::: {.column width=\"45%\"}\n![Nassau Street](nassau_street.png)\n:::\n\n::::\n\n\n\n## More Than\n\nThere are 32 parking spaces on a certain stretch of Nassau Street.  Suppose that each parking space tends to be occupied about 81 percent of the time.\t What is the probability that *more than 5* of the parking spaces are open?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvbinom(6:32, 32, 0.19, labels = FALSE) +\n  labs(title = \"Probability of more than 5 open parking spaces\",\n       x = \"open parking spaces\")\n```\n\n::: {.cell-output-display}\n![](12_binomial_distribution_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n\nEach of the following are equivalent ways to compute the requested probability (\"more than 5\"))\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(dbinom(6:32, 32, 0.19))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.5853578\n```\n\n\n:::\n\n```{.r .cell-code}\n1 - pbinom(5, 32, 0.19)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.5853578\n```\n\n\n:::\n\n```{.r .cell-code}\npbinom(5, 32, 0.19, lower.tail = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.5853578\n```\n\n\n:::\n:::\n\n\n\n:::::\n\n\n# Brief History of Randomization\n\n## Venetian Elections\n\n:::: {.columns}\n\n::: {.column width=\"25%\"}\n![Election of Doge](election_of_doge.png)\n:::\n\n::: {.column width=\"5%\"}\n\t\n:::\n\n::: {.column width=\"40%\"}\n* left: \"Sorting process for the election of the Doge of Venice\", Jacob von Sandrart, 1687\n\n    * image credit: The Ballot Boy\n    \n* right: elementary balls-and-urns probability setup\n\n    * image credit: Professor Joyce, Clark University\n:::\n\n::: {.column width=\"5%\"}\n\t\n:::\n\n::: {.column width=\"25%\"}\n![urns](urns.png)\n:::\n\n::::\n\n## Discrete\n\nIn `R`, discrete sampling is handled with `sample`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample(LETTERS[1:6], size = 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"C\" \"E\" \"F\" \"A\" \"B\"\n```\n\n\n:::\n:::\n\n\n\nAsking for too many observations here leads to an error.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#sample(LETTERS[1:6], size = 7)\n```\n:::\n\n\n\n\nBe default, the sampling is performed *without replacement*.  Sometimes we will need to perform sampling *with replacement*.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample(LETTERS[1:6], size = 7, replace = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"C\" \"E\" \"A\" \"D\" \"C\" \"F\" \"F\"\n```\n\n\n:::\n:::\n\n\n\nSometimes, we want to suppress randomization.  More precisely, we want to replicate the creation of the pseudo-random numbers.  This is useful for working on simulations with groups of researchers (i.e. get the same answers).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(201)\nsample(LETTERS[1:6], size = 7, replace = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"C\" \"F\" \"B\" \"A\" \"E\" \"F\" \"E\"\n```\n\n\n:::\n:::\n\n\n\n## Continuous\n\nThe most common function for pseudo-random number generation in `R` is `runif`\n\n* pronounced \"r unif\" (i.e. random numbers from a uniform distribution)\n* default: random numbers between zero and one\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrunif(5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.09931186 0.28766776 0.47009467 0.67783012 0.60524130\n```\n\n\n:::\n:::\n\n\n\n::: {.callout-note collapse=\"true\"}\n## (optional) Math: Discrete versus Continuous\n\nIn math classes, we tend to have the students pick up simplistic definitions:\n\n* discrete data: can be written as a list\n\n    * math: \"countable\"\n    \n* continous data: function can be drawn without lifting your pencil\n\n    * math: \"uncountable\"\n    \nIf anyone is curious, here are more rigorous definitions from Real Analysis\n\n* A set $X$ is **discrete** if $\\exists \\epsilon\\in\\mathbb{R}$ such that\n\n$$\\forall x\\in X, \\exists c \\in B(x,\\epsilon) \\text{ such that } c \\in \\mathbb{R}/X$$\nwhere $B$ is a ball of center $x$ and radius $\\epsilon$.\n\n* A set $X$ is **continuous** if \n\n$$\\forall x \\in X, \\forall\\epsilon \\in \\mathbb{R}, \\exists c \\in B(x,\\epsilon) \\text{ such that } c\\in X$$\n\n:::\n\n## Not Uniform\n\nThe previous sampling examples were chosing from uniform distributions (i.e. each outcome was equally likely).  We will have situations that are not uniform.  For example\n\n$$P(red) = 1/3, \\quad P(green) = 2/3$$\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample(c(\"red\", \"green\"), size = 20, replace = TRUE, prob = c(1/3, 2/3))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"green\" \"green\" \"green\" \"green\" \"green\" \"green\" \"green\" \"red\"   \"green\"\n[10] \"green\" \"green\" \"green\" \"red\"   \"red\"   \"green\" \"green\" \"green\" \"red\"  \n[19] \"green\" \"green\"\n```\n\n\n:::\n:::\n\n\n\n\n## Weighted Mean\n\n::::: {.panel-tabset}\n\n## Definition\n\n* sample mean\n\n$$\\bar{x} = \\frac{1}{n}\\sum_{i=1}^{n} x_{i}$$\n\n* weighted mean\n\n$$\\bar{x} = \\frac{\\sum_{i=1}^{n} w_{i}*x_{i}}{\\sum_{i=1}^{n} w_{i}}$$\n\n## Example\n\nThis [banana slicer](https://www.amazon.com/Hutzler-3571-571-Banana-Slicer/dp/B0047E0EII/) is popular on Amazon.  We will replicate the calculation for the average rating.\n\n:::: {.columns}\n\n::: {.column width=\"60%\"}\nThe average rating is not\n$$\\frac{1 + 2 + 3 + 4 + 5}{5}$$\nbut rather\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstars <- 1:5\nprobs <- c(4, 4, 8, 13, 71)/100\n\n# weighted mean\nsum(probs * stars) / sum(probs)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4.43\n```\n\n\n:::\n:::\n\n\n\n:::\n\n::: {.column width=\"10%\"}\n\t\n:::\n\n::: {.column width=\"30%\"}\n![banana slicer](banana_slicer.png)\n:::\n\n::::\n\n:::::\n\n\n# Scenario: Taco versus Sandwich\n\n:::: {.columns}\n\n::: {.column width=\"45%\"}\nThe undergraduates at Princeton are choosing an official food item, and the two remaining candidates are \"tacos\" and \"sandwiches\".  Suppose also that with regards to prior events, some residential colleges are alloted more delegates than others.\t\n:::\n\n::: {.column width=\"10%\"}\n\t\n:::\n\n::: {.column width=\"45%\"}\n![Tacos or Sandwiches?](taco_sandwich.png)\n:::\n\n::::\n\n\n\n## Voter Info\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(201)\ncollege <- c(\"Butler\", \"Forbes\", \"Mathey\", \"New College West\", \"Rockefeller\", \"Whitman\", \"Yeh College\")\nn <- length(college)\ndelegates <- sample(11:20, size = n, replace = FALSE)\ntaco_prop <- round(runif(n), 2)\n\n# if you want to experiment with this example later, you can explicitly set the weights here\n# college <- c(\"Butler\", \"Forbes\", \"Mathey\", \"New College West\", \"Rockefeller\", \"Whitman\", \"Yeh College\")\n# delegates <- c(13, 16, 17, 12, 11, 15, 18)\n# taco_prop <- c(27, 10, 29, 57, 68, 61, 47) / 100\n\ndf_election <- data.frame(\n  college, delegates, taco_prop\n)\n```\n:::\n\n\n\n## Complement\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_election <- df_election |>\n  mutate(sandwich_prop = 1 - taco_prop)\n```\n:::\n\n\n\n## Simulate One Election\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(201)\ndf_election <- df_election |>\n  rowwise() |>\n  mutate(picks = sample(c(\"Taco\", \"Sandwich\"), \n                        size = 1,\n                        prob = c(taco_prop, sandwich_prop)))\n```\n:::\n\n\n\n## Count Votes\n\nIn this example, the votes are tabulated as a weighted mean.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_election <- df_election |>\n  mutate(picks_bool = ifelse(picks == \"Taco\", 1, 0))\n\ntaco_share <- sum(df_election$delegates * df_election$picks_bool) / sum(df_election$delegates)\n\nprint(taco_share)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.254902\n```\n\n\n:::\n:::\n\n\n\n## Classify Result\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nelection_result <- case_when(\n  taco_share < 0.5 ~ \"Sandwich Won\",\n  taco_share > 0.5 ~ \"Taco Won\",\n  .default = \"tie\"\n)\n\nprint(election_result)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Sandwich Won\"\n```\n\n\n:::\n:::\n\n\n\n\n# Simulation\n\nSo far, we have merely one observation.  What if we wanted to address broader questions like\n\n* How often would taco win in this scenario?\n* What is the variance (or standard deviation) for the `taco_share`?\n\n## for loops\n\nA common programming tool is the **for loop**. We tend to use letters $i$, $j$, and $k$ historically as *counter* variables.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nN <- 7 #number of iterations\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfor(i in 1:N){\n  print(i)\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n[1] 6\n[1] 7\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfor(i in 1:N){\n  print(i^2)\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n[1] 4\n[1] 9\n[1] 16\n[1] 25\n[1] 36\n[1] 49\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfor(i in 1:N){\n  print(LETTERS[1:i])\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"A\"\n[1] \"A\" \"B\"\n[1] \"A\" \"B\" \"C\"\n[1] \"A\" \"B\" \"C\" \"D\"\n[1] \"A\" \"B\" \"C\" \"D\" \"E\"\n[1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\"\n[1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\"\n```\n\n\n:::\n:::\n\n\n\n\n## Election Simulation\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nN <- 1337 #number of simulations\n\n# pre-allocate space for storing results\ntaco_share_vec <- rep(NA, N)\n\nfor(i in 1:N){\n  df_election <- df_election |>\n  rowwise() |>\n    mutate(picks = sample(c(\"Taco\", \"Sandwich\"), \n                          size = 1,\n                          prob = c(taco_prop, sandwich_prop)))\n  df_election <- df_election |>\n    mutate(picks_bool = ifelse(picks == \"Taco\", 1, 0))\n  \n  taco_share_vec[i] <- sum(df_election$delegates * df_election$picks_bool) / sum(df_election$delegates)\n}\n\ndf_simulation <- data.frame(iter = 1:N, taco_share_vec)\n```\n:::\n\n\n\n::: {.callout-note collapse=\"true\"}\n## On the computer processing of simulations\n\nIf your computer is older\n\n* took a while to draw maps\n* took a while to produce network visuals\n\nyou may reduce the number of iterations from 1337 to 201 (for example).\n:::\n\n\n## Visualize the Simulation\n\nNow, `taco_share_vec` is itself a numerical variable, so we can visualize its distribution with a histogram.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_simulation |>\n  ggplot(aes(x = taco_share_vec)) +\n  geom_histogram(bins = 20, color = princeton_black, fill = princeton_orange) +\n  geom_vline(xintercept = 0.5, color = \"#2A668F\", \n             linewidth = 3, linetype = 3) +\n  labs(title = \"Taco versus Sandwich!\",\n       subtitle = \"Simulated delegation voting of the residential colleges\",\n       caption = \"SML 201\",\n       x = \"taco vote share\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](12_binomial_distribution_files/figure-html/unnamed-chunk-38-1.png){width=672}\n:::\n:::\n\n\n\n## Simulation Statistics\n\nTo wrap up this example,\n\n* \"Taco\" had this vote share on average:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(df_simulation$taco_share_vec)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.4101442\n```\n\n\n:::\n:::\n\n\n\nTo compute how often \"Taco\" would win probabilistically, we could\n\n* count the iterations where `taco_share_vec > 0.50`\n* divide by the number of iterations\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(df_simulation$taco_share_vec > 0.50)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.2984293\n```\n\n\n:::\n:::\n\n\n\nPreview: the **standard error** is the standard error of a sampling distribution.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsd(df_simulation$taco_share_vec)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.1734641\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n\n\n\n\n# Quo Vadimus?\n\n:::: {.columns}\n\n::: {.column width=\"45%\"}\n\n:::\n\n::: {.column width=\"10%\"}\n\t\n:::\n\n::: {.column width=\"45%\"}\n### Exam 1 Statistics\n:::\n\n::::\n\n\n# Footnotes\n\n::: {.callout-note collapse=\"true\"}\n## (optional) Additional Resources\n\n* The [Doge of Venice](https://en.wikipedia.org/wiki/Doge_of_Venice)\n* [Skewness](https://en.wikipedia.org/wiki/Skewness)\n\n:::\n\n::: {.callout-note collapse=\"true\"}\n## Session Info\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n [1] lubridate_1.9.3 forcats_1.0.0   stringr_1.5.1   dplyr_1.1.4    \n [5] purrr_1.0.2     readr_2.1.5     tidyr_1.3.1     tibble_3.2.1   \n [9] ggplot2_3.5.1   tidyverse_2.0.0 patchwork_1.3.0 gt_0.11.0      \n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.5      jsonlite_1.8.8    compiler_4.4.1    tidyselect_1.2.1 \n [5] xml2_1.3.6        scales_1.3.0      yaml_2.3.10       fastmap_1.2.0    \n [9] R6_2.5.1          labeling_0.4.3    generics_0.1.3    knitr_1.48       \n[13] htmlwidgets_1.6.4 munsell_0.5.1     pillar_1.9.0      tzdb_0.4.0       \n[17] rlang_1.1.4       utf8_1.2.4        stringi_1.8.4     xfun_0.46        \n[21] timechange_0.3.0  cli_3.6.3         withr_3.0.1       magrittr_2.0.3   \n[25] digest_0.6.36     grid_4.4.1        rstudioapi_0.16.0 hms_1.1.3        \n[29] lifecycle_1.0.4   vctrs_0.6.5       evaluate_0.24.0   glue_1.7.0       \n[33] farver_2.1.2      fansi_1.0.6       colorspace_2.1-1  rmarkdown_2.28   \n[37] tools_4.4.1       pkgconfig_2.0.3   htmltools_0.5.8.1\n```\n\n\n:::\n:::\n\n\n:::\n\n\n::: {.callout-note collapse=\"true\"}\n## Example Callout Block\n\n`note`, `tip`, `warning`, `caution`, or `important`\n:::\n\n\n:::: {.columns}\n\n::: {.column width=\"45%\"}\n\t\n:::\n\n::: {.column width=\"10%\"}\n\t\n:::\n\n::: {.column width=\"45%\"}\n\n:::\n\n::::\n\n::::: {.panel-tabset}\n\n\n\n:::::",
    "supporting": [
      "12_binomial_distribution_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}