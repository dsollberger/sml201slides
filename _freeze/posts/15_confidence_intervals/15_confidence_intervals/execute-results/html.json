{
  "hash": "6b563d98b6d9de23ea1decc337937c46",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"15: Confidence Intervals\"\nauthor: \"Derek Sollberger\"\ndate: \"2024-10-31\"\nformat:\n  html:\n    toc: true\n    theme: cerulean\n---\n\n\n\n# SML 201\n\n::: {.callout-note collapse=\"true\"}\n## Libraries and Helper Functions\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"bayesrules\") #data set: Pulse of the Nation\nlibrary(\"ggimage\")    #customize images for scatterpoint points\nlibrary(\"ggtext\")     #adorn ggplot text\nlibrary(\"gt\")         #great tables\nlibrary(\"infer\")      #streamlined code for inference tasks\nlibrary(\"janitor\")    #compute proportions easily\nlibrary(\"tidyverse\")  #tools for data wrangling and visualization\n\n# school colors\nprinceton_orange <- \"#E77500\"\nprinceton_black  <- \"#121212\"\n\n# data set: Pulse of the Nation\ndata(pulse_of_the_nation)\npulse_df <- pulse_of_the_nation\n\n# data set: SML 201 demographics survey\ndemo_df <- readr::read_csv(\"https://raw.githubusercontent.com/dsollberger/sml201slides/main/posts/04_categories/sml201survey.csv\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# helper function\nvnorm <- function(x, mu = 0, sigma = 1, section = \"lower\"){\n  \n  # bell curve\n  x_vals <- seq(mu - 4*sigma, mu + 4*sigma, length.out = 201)\n  y_vals <- dnorm(x_vals, mu, sigma)\n  df_for_graph <- data.frame(x_vals, y_vals)\n\n  # outline shaded regions\n  if(length(x) == 1){\n    shade_left <- rbind(c(x[1],0), df_for_graph |>\n                        filter(x_vals < x[1]))\n    shade_right <- rbind(c(x[1],0), df_for_graph |>\n                        filter(x_vals > x[1]))\n  }\n  if(length(x) == 2){\n    shade_between <- rbind(c(x[1],0),\n                       df_for_graph |>\n                         filter(x_vals > x[1] &\n                                  x_vals < x[2]),\n                       c(x[2],0))\n    shade_tails <- rbind(df_for_graph |>\n                        filter(x_vals < x[1]),\n                     c(x[1],0),\n                     c(x[2],0),\n                     df_for_graph |>\n                        filter(x_vals > x[2]))\n  }\n  if(section == \"lower\"){\n    bell_curve <- df_for_graph |>\n      ggplot(aes(x_vals, y_vals)) +\n      geom_polygon(aes(x = x_vals, y = y_vals),\n                   data = shade_left,\n                   fill = \"#E77500\",) +\n      geom_line(color = \"gray50\", linewidth = 2)\n    prob_val <- round(pnorm(x,mu,sigma), 4)\n  }\n  if(section == \"upper\"){\n    bell_curve <- df_for_graph |>\n      ggplot(aes(x_vals, y_vals)) +\n      geom_polygon(aes(x = x_vals, y = y_vals),\n                   data = shade_right,\n                   fill = \"#E77500\",) +\n      geom_line(color = \"gray50\", linewidth = 2)\n    prob_val <- 1 - round(pnorm(x,mu,sigma), 4)\n  }\n  if(section == \"between\"){\n    bell_curve <- df_for_graph |>\n      ggplot(aes(x_vals, y_vals)) +\n      geom_polygon(aes(x = x_vals, y = y_vals),\n                   data = shade_between,\n                   fill = \"#E77500\",) +\n      geom_line(color = \"gray50\", linewidth = 2)\n    prob_val <- round(diff(pnorm(x,mu,sigma)), 4)\n  }\n  if(section == \"tails\"){\n    bell_curve <- df_for_graph |>\n      ggplot(aes(x_vals, y_vals)) +\n      geom_polygon(aes(x = x_vals, y = y_vals),\n                   data = shade_tails,\n                   fill = \"#E77500\",) +\n      geom_line(color = \"gray50\", linewidth = 2)\n    prob_val <- round(1 - diff(pnorm(x,mu,sigma)), 4)\n  }\n  \n  # plot bell curve\n  bell_curve + \n    labs(subtitle = paste0(\"Probability: \", prob_val),\n         caption = \"SML 201\", y = \"\") +\n    theme_minimal()\n}\n```\n:::\n\n\n\n:::\n\n## Start\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n* **Goal**: Estimate unknown population statistics\n\n* **Objective**: Deploy and interpret confidence intervals\n:::\n\n::: {.column width=\"10%\"}\n\n:::\n\n::: {.column width=\"40%\"}\n![Ghostbusters (1984)](ghostbusters_1984_movie_poster.png)\n:::\n\n::::\n\n# Old Methods\n\n## Scenario: Believe in Ghosts?\n\n::::: {.panel-tabset}\n\n## Query\n\n:::: {.columns}\n\n::: {.column width=\"45%\"}\n![Ray Stantz](Ray_Stantz.png)\t\n:::\n\n::: {.column width=\"10%\"}\n\t\n:::\n\n::: {.column width=\"45%\"}\nWhat proportion of people believe that ghosts exist?\n:::\n\n::::\n\n## Data\n\n:::: {.columns}\n\n::: {.column width=\"45%\"}\n* source: [Pulse of the Nation](https://thepulseofthenation.com/#intro) survey by Cards Against Humanity\n* Poll 1: September 2017\n\n* 1000 observations\n* 15 variables\n\n:::\n\n::: {.column width=\"10%\"}\n\n:::\n\n::: {.column width=\"45%\"}\n![Pulse of the Nation](pulse_of_the_nation.png)\n:::\n\n::::\n:::::\n\n\n## Normal Distribution\n\n:::: {.columns}\n\n::: {.column width=\"45%\"}\n![](Walter_Peck.png)\t\nWalter Peck wants estimates to have at least *95 percent confidence*!\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 2.5 and 97.5 percentiles\nqnorm(c(0.025, 0.975))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -1.959964  1.959964\n```\n\n\n:::\n:::\n\n\n\n:::\n\n::: {.column width=\"10%\"}\n\t\n:::\n\n::: {.column width=\"45%\"}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvnorm(qnorm(c(0.025, 0.975)), section = \"between\") +\n  annotate(\"text\", x = 0, y = 0.2, label = \"95%\", \n           color = \"white\", size = 15) +\n  labs(title = \"Extracting a 95 Percent Interval\",\n       x = \"z\") +\n  scale_x_continuous(breaks = c(-1.96, 1.96),\n                     labels = c(-1.96, 1.96))\n```\n\n::: {.cell-output-display}\n![](15_confidence_intervals_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n:::\n\n::::\n\n\n## Sample Proportion\n\n::::: {.panel-tabset}\n\n## Display\n\n:::: {.columns}\n\n::: {.column width=\"40%\"}\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n ghosts    n percent\n     No  621   62.1%\n    Yes  379   37.9%\n  Total 1000  100.0%\n```\n\n\n:::\n:::\n\n\n\n$$\\hat{p} = 0.379$$\n$$n = 1000$$\n\n:::\n\n::: {.column width=\"10%\"}\n\t\n:::\n\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](15_confidence_intervals_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n:::\n\n::::\n\n## Code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npulse_df |>\n  tabyl(ghosts) |>\n  adorn_totals(\"row\") |>\n  adorn_pct_formatting()\n\ntitle_string <- \"<span style = 'color:#23b63c'>Believes that Ghosts Exist</span><br>versus<br><span style = 'color:#ea0000'>Doesn't Believe that Ghosts Exist</span>\"\n\npulse_df |>\n  ggplot() +\n  geom_bar(aes(x = ghosts, fill = ghosts)) +\n  annotate(\"text\", x = c(\"No\", \"Yes\"), y = c(310, 170), \n           label = c(\"62%\", \"38%\"), \n           color = \"white\", size = 15) +\n  labs(title = title_string,\n       caption = \"SML 201\") +\n  scale_fill_manual(values = c(\"#ea0000\", \"#23b63c\")) +\n  theme_minimal() +\n  theme(legend.position = \"none\",\n        plot.title = element_markdown(hjust = 0.5,\n                                      face = \"bold\",\n                                      size = 20))\n```\n:::\n\n\n\n:::::\n\n\n## Confidence Interval for a Proportion\n\n::::: {.panel-tabset}\n\n## Math\n\n$$\\hat{p} \\pm E, \\quad\\text{where } E = z_{\\alpha/2}*\\sqrt{\\frac{\\hat{p}(1 - \\hat{p})}{n}} \\text{ and } z_{\\alpha/2} \\approx 1.96$$\n\n$$\\left(0.3489, 0.4091\\right)$$\n\n*We are 95 percent confident* that the **true population proportion** of Americans that believe in ghosts is in between 34.89 and 40.91 percent.\n\n## R\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# sample statistics\nphat <- mean(pulse_df$ghosts == \"Yes\")\nn <- sum(!is.na(pulse_df$ghosts))\n\n# margin of error\nE <- qnorm(0.975)*sqrt((phat*(1-phat))/n)\n\n# confidence interval\nphat + c(-1,1)*E\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.3489314 0.4090686\n```\n\n\n:::\n:::\n\n\n\n:::::\n\n\n## Scenario: How Old Are You?\n\n:::: {.columns}\n\n::: {.column width=\"45%\"}\n![Dana Barrett](Dana_Barrett.png)\n:::\n\n::: {.column width=\"10%\"}\n\t\n:::\n\n::: {.column width=\"45%\"}\nAmong the people that believe in ghosts, how old are you?\n:::\n\n::::\n\n\n::::: {.panel-tabset}\n\n## Display\n\n:::: {.columns}\n\n::: {.column width=\"40%\"}\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 Ã— 3\n  ghosts  xbar     n\n  <fct>  <dbl> <int>\n1 No      50.3   621\n2 Yes     48.0   379\n```\n\n\n:::\n:::\n\n\n\n$$\\bar{x} \\approx 47.9525$$\n$$n = 379$$\n\n:::\n\n::: {.column width=\"10%\"}\n\t\n:::\n\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](15_confidence_intervals_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n:::\n\n::::\n\n## Code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npulse_df |>\n  group_by(ghosts) |>\n  summarize(xbar = mean(age, na.rm = TRUE),\n            n = n())\n\ntitle_string <- \"<span style = 'color:#23b63c'>Believes that Ghosts Exist</span><br>versus<br><span style = 'color:#ea0000'>Doesn't Believe that Ghosts Exist</span>\"\n\npulse_df |>\n  ggplot() +\n  geom_density(aes(x = age, fill = ghosts),\n               alpha = 0.5) +\n  labs(title = title_string,\n       caption = \"SML 201\") +\n  scale_fill_manual(values = c(\"#ea0000\", \"#23b63c\")) +\n  theme_minimal() +\n  theme(legend.position = \"none\",\n        plot.title = element_markdown(hjust = 0.5,\n                                      face = \"bold\",\n                                      size = 20))\n```\n:::\n\n\n\n:::::\n\n\n## Confidence Interval for a Mean\n\n::::: {.panel-tabset}\n\n## Math\n\n$$\\bar{x} \\pm E, \\quad\\text{where } E = t_{\\alpha/2}*\\frac{s}{n}$$\n\n$$\\left(46.3651, 49.5399\\right)$$\n\n*We are 95 percent confident* that the **true population mean** age for people that believe ghosts exist is in between 46.37 and 49.54 years old.\n\n## R\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# subset\nghosts_yes <- pulse_df |> filter(ghosts == \"Yes\")\n\n# sample statistics\nxbar <- mean(ghosts_yes$age, na.rm = TRUE)\ns <- sd(ghosts_yes$age, na.rm = TRUE)\nn <- sum(!is.na(ghosts_yes$age))\n\n# margin of error (here: \"df\" are degrees of freedom)\nE <- qt(0.975, df = n - 1)*s/sqrt(n)\n\n# confidence interval\nxbar + c(-1,1)*E\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 46.36511 49.53991\n```\n\n\n:::\n:::\n\n\n\n:::::\n\n## Student t Distribution\n\n::::: {.panel-tabset}\n\n## Idea\n\nThe **Student t distribution** is an abstraction of the standard normal distribution that adjusts with wider tails to allow for more probability in the tails\n\n![t distribution](t_distribution_bell_curves.png)\n\n## Gosset\n\n![William Sealy Gosset](William_Sealy_Gosset.png)\n\n## df\n\nIn advanced statistics, such as the adjusted $R^{2}$ calculation for the coefficient of determination, the **degrees of freedom** are the difference between\n\n* number of observations in the data\n* number of independent variables being modeled\n\nFor this setting---estimating the true population mean---the degrees of freedom are simply\n\n$$df = n - 1$$\n:::::\n\n::: {.callout-warning}\n## Leaving the t distribution behind\n\nFor these calculations\n\n$$\\bar{x} \\pm E, \\quad\\text{where } E = t_{\\alpha/2}*\\frac{s}{n}$$\n\n* rely more on *summary statistics* rather than all of the gathered data\n* \"degrees of freedom\" is a rather convoluted notion\n* t-distribution is itself an approximation\n* leads to more reliance on abstract probability distributions\n* departs from frequentist probability philosophy\n* more useful before calculators and computers\n:::\n\n\n# Modern Methods\n\n::: {.callout-tip}\n## infer\n\nThe developers of the `infer` package (and similar in other programming languages) streamlined coding syntax for these statistical tasks\n\n* eases programming\n* leverages *simulations*\n:::\n\n\n## Scenario: Princeton Politics\n\nThe survey question was\n\n> On a scale of 0 to 100---with 0 = Democrat and 100 = Republican---where are your political leanings? \n\n## Bootstrap Distribution\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(201)\nbootstrap_distribution <- demo_df |>\n  specify(response = politics) |>\n  generate(reps = 1000, type = \"bootstrap\") |>\n  calculate(stat = \"mean\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 16 rows containing missing values.\n```\n\n\n:::\n:::\n\n\n\n## Endpoints (Standard Error)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nxbar <- mean(demo_df$politics, na.rm = TRUE)\nse_ci <- bootstrap_distribution |>\n  get_confidence_interval(level = 0.95,\n                          type = \"se\", \n                          point_estimate = xbar)\n```\n:::\n\n\n\n## Visualization\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbootstrap_distribution |>\n  visualize() +\n  shade_confidence_interval(endpoints = se_ci,\n                            color = princeton_black,\n                            fill = princeton_orange) +\n  labs(title = \"Political Leanings of Princeton Students\",\n       subtitle = \"Fall 2024\",\n       caption = \"SML 201\",\n       x = \"0: Democrat ... 100: Republican\") +\n  theme_minimal() +\n  xlim(0, 100)\n```\n\n::: {.cell-output-display}\n![](15_confidence_intervals_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\n## Inference\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(round(se_ci))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 Ã— 2\n  lower_ci upper_ci\n     <dbl>    <dbl>\n1       30       38\n```\n\n\n:::\n:::\n\n\n\nIn this survey question, \"On a scale of 0 to 100---with 0 = Democrat and 100 = Republican---where are your political leanings?\", *we are 95 percent confident* that the true population mean for Princeton students is in between 30 and 38.\n\n::: {.callout-caution}\n## Discussion\n\nThis was a survey among SML 201 students\n\n* not a representative or random sample of Princeton students\n* self-reported data\n:::\n\n\n## Scenario: Pineapple on Pizza\n\nThe sample proportions (among those who were adamant) were\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndemo_df |>\n  filter(pineapplePizza %in% c(\"No!\", \"Yes!\")) |>\n  tabyl(pineapplePizza) |>\n  adorn_totals(\"row\") |>\n  adorn_pct_formatting()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n pineapplePizza  n percent\n            No! 32   43.8%\n           Yes! 41   56.2%\n          Total 73  100.0%\n```\n\n\n:::\n:::\n\n\n\n## Bootstrap Distribution\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(201)\nbootstrap_distribution <- demo_df |>\n  filter(pineapplePizza %in% c(\"No!\", \"Yes!\")) |>\n  specify(response = pineapplePizza, success= \"Yes!\") |>\n  generate(reps = 1000, type = \"bootstrap\") |>\n  calculate(stat = \"prop\")\n```\n:::\n\n\n\n## Endpoints (Percentile)\n\nBuilding the confidence interval from percentiles is perhaps more reasonable than using the standard errors (and less code too).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nper_ci <- bootstrap_distribution |>\n  get_ci(level = 0.95, type = \"percentile\")\n```\n:::\n\n\n\n## Visualization\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbootstrap_distribution |>\n  visualize() +\n  shade_ci(per_ci, \n           color = princeton_black, fill = princeton_orange)\n```\n\n::: {.cell-output-display}\n![](15_confidence_intervals_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n\n## Inference\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbootstrap_distribution |> get_ci()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 Ã— 2\n  lower_ci upper_ci\n     <dbl>    <dbl>\n1    0.438    0.671\n```\n\n\n:::\n:::\n\n\n\nAmong the Princeton students who have a strong opinion on whether or not pineapple is a good pizza topping, *we are 95 percent confident* that the *true population proportion* of students who like pineapple on pizza is in between 44 and 67 percent. \n\n::: {.callout-caution}\n## Discussion\n\nThis was a survey among SML 201 students\n\n* relatively smaller sample size (n = 73 students)\n* Since 0.5 is contained within the confidence interval, this result is not significally different than simply flipping a fair coin.\n:::\n\n\n# Theory\n\n:::: {.columns}\n\n::: {.column width=\"45%\"}\n![Peter Venkman](Peter_Venkman.png)\n:::\n\n::: {.column width=\"10%\"}\n\t\n:::\n\n::: {.column width=\"45%\"}\nBut why are we using careful language like \"We are 95 percent confident ...\"?\n:::\n\n::::\n\n## Scenario: 20 Ghosts\n\n:::: {.columns}\n\n::: {.column width=\"25%\"}\n![Louis Tully](Louis_Tully.png)\n:::\n\n::: {.column width=\"5%\"}\n\t\n:::\n\n::: {.column width=\"40%\"}\nRemember when we faced the **Dungeon Master** and their army of 20 ghosts?  Under the equal probabilities of a uniform distribution, we knew that we would face off against $\\mu = 10.5$ ghosts, on average.\t\n:::\n\n::: {.column width=\"5%\"}\n\t\n:::\n\n::: {.column width=\"25%\"}\n![d20](d20_die.png)\n:::\n\n::::\n\n## Experiment\n\n:::: {.columns}\n\n::: {.column width=\"30%\"}\n![Egon Spengler](Egon_Spengler.png)\n:::\n\n::: {.column width=\"10%\"}\n\t\n:::\n\n::: {.column width=\"60%\"}\nWe could *resample* the outcome space and see what proportion of confidence intervals capture the [population mean] ghost.\n:::\n\n::::\n\n## Simulation\n\n::::: {.panel-tabset}\n\n## Animation\n\n\n\n::: {.cell}\n\n:::\n\n\n![CI animation](CI_animation.gif)\n\n## Code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(201)\n# d20\nd20_df <- data.frame(d20_outcomes = 1:20)\n\n# create data frame and allocate space\ndf_for_graph <- data.frame(\n  id = 1:26,\n  a = rep(NA, 26),\n  b = rep(NA, 26),\n  result = rep(NA, 26),\n  result_color = rep(NA, 26)\n)\n\nfor(i in 1:26){\n  # bootstrap_distribution <- d20_df |>\n  #   specify(response = d20_outcomes) |>\n  #   generate(reps = 50, type = \"bootstrap\") |>\n  #   calculate(stat = \"mean\")\n  # CI <- bootstrap_distribution |> get_ci()\n  \n  this_sample <- sample(1:20, size = 10, replace = TRUE)\n  xbar <- mean(this_sample)\n  s <- sd(this_sample)\n  n <- length(this_sample)\n  E <- qt(0.975, df = n-1)*s/sqrt(n)\n  \n  \n  # df_for_graph$a[i] <- unlist(CI[1])\n  # df_for_graph$b[i] <- unlist(CI[2])\n  df_for_graph$a[i] <- xbar - E\n  df_for_graph$b[i] <- xbar + E\n  df_for_graph$result[i] <- ifelse(\n    df_for_graph$a[i] < 10.5 & 10.5 < df_for_graph$b[i],\n    \"captured\",\n    \"not captured\"\n  )\n  df_for_graph$result_color[i] <- ifelse(\n    df_for_graph$a[i] < 10.5 & 10.5 < df_for_graph$b[i],\n    \"#23b63c\",\n    \"#ea0000\"\n  )\n  \n  capture_rate <- mean(df_for_graph$result == \"captured\",\n                       na.rm = TRUE)\n  \n  this_plot <- df_for_graph |>\n    filter(id %in% 1:i) |>\n    ggplot() +\n    # geom_vline(aes(xintercept = 10.5), \n    #            color = \"#ab9f8f\", linewidth = 2) +\n    geom_segment(aes(x = a, y = id, \n                     xend = b, yend = id,\n                     color = result_color)) +\n    geom_point(aes(x = a, y = id, color = result_color),\n               size = 3) +\n    geom_point(aes(x = b, y = id, color = result_color),\n               size = 3) +\n    geom_image(aes(x = 10.5, y = id),\n               image = \"ghostbusters_ghost.png\") +\n    labs(title = \"Confidence Intervals\",\n         subtitle = paste0(\"capture rate: \",\n                           round(100*capture_rate, 2),\n                           \" percent\"),\n         caption = \"SML 201\",\n         x = \"ghosts\", y = \"interval number\") +\n    scale_color_manual(values = c(\"#23b63c\", \"#ea0000\")) +\n    theme_minimal() +\n    theme(legend.position = \"none\")\n  \n  ggsave(paste0(\"images/CI_plot\", LETTERS[i], \".png\"), this_plot)\n}\n\npng_files <- Sys.glob(\"images/CI_plot*.png\")\n\ngifski::gifski(\n  png_files,\n  \"CI_animation.gif\",    #output file name\n  height = 1600, width = 1600, #you may change the resolution\n  delay = 1/2                #seconds\n)\n```\n:::\n\n\n\n\n:::::\n\n\n\n\n\n\n\n\n\n\n\n\n# Quo Vadimus?\n\n:::: {.columns}\n\n::: {.column width=\"40%\"}\n* Precept 7\n* Coloring Assignment 2\n* Project 3 (assigned Nov 11)\n* Exam 2 (December 5)\n:::\n\n::: {.column width=\"10%\"}\n\t\n:::\n\n::: {.column width=\"50%\"}\n![BOOlean logic](BOOlean_logic.png)\n\n:::\n\n::::\n\n\n# Footnotes\n\n::: {.callout-note collapse=\"true\"}\n## (optional) Additional Resources\n\n\n\n:::\n\n::: {.callout-note collapse=\"true\"}\n## Session Info\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 10 x64 (build 19045)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n [1] lubridate_1.9.3  forcats_1.0.0    stringr_1.5.1    dplyr_1.1.4     \n [5] purrr_1.0.2      readr_2.1.5      tidyr_1.3.1      tibble_3.2.1    \n [9] tidyverse_2.0.0  janitor_2.2.0    infer_1.0.7      gt_0.11.1       \n[13] ggtext_0.1.2     ggimage_0.3.3    ggplot2_3.5.1    bayesrules_0.0.2\n\nloaded via a namespace (and not attached):\n  [1] tensorA_0.36.2.1     rstudioapi_0.17.0    jsonlite_1.8.8      \n  [4] magrittr_2.0.3       magick_2.8.5         farver_2.1.2        \n  [7] nloptr_2.1.1         rmarkdown_2.28       fs_1.6.4            \n [10] vctrs_0.6.5          minqa_1.2.8          base64enc_0.1-3     \n [13] htmltools_0.5.8.1    distributional_0.5.0 curl_5.2.1          \n [16] gridGraphics_0.5-1   StanHeaders_2.32.10  htmlwidgets_1.6.4   \n [19] plyr_1.8.9           zoo_1.8-12           commonmark_1.9.2    \n [22] igraph_2.0.3         mime_0.12            lifecycle_1.0.4     \n [25] pkgconfig_2.0.3      colourpicker_1.3.0   Matrix_1.7-0        \n [28] R6_2.5.1             fastmap_1.2.0        shiny_1.9.1         \n [31] snakecase_0.11.1     digest_0.6.35        colorspace_2.1-1    \n [34] crosstalk_1.2.1      labeling_0.4.3       fansi_1.0.6         \n [37] timechange_0.3.0     abind_1.4-8          compiler_4.4.1      \n [40] proxy_0.4-27         bit64_4.5.2          withr_3.0.1         \n [43] backports_1.5.0      inline_0.3.19        shinystan_2.6.0     \n [46] QuickJSR_1.4.0       pkgbuild_1.4.4       MASS_7.3-60.2       \n [49] gtools_3.9.5         loo_2.8.0            tools_4.4.1         \n [52] httpuv_1.6.15        threejs_0.3.3        glue_1.7.0          \n [55] nlme_3.1-164         promises_1.3.0       gridtext_0.1.5      \n [58] grid_4.4.1           checkmate_2.3.2      reshape2_1.4.4      \n [61] generics_0.1.3       gtable_0.3.5         tzdb_0.4.0          \n [64] class_7.3-22         hms_1.1.3            xml2_1.3.6          \n [67] utf8_1.2.4           pillar_1.9.0         markdown_1.13       \n [70] yulab.utils_0.1.7    vroom_1.6.5          posterior_1.6.0     \n [73] later_1.3.2          splines_4.4.1        lattice_0.22-6      \n [76] survival_3.6-4       bit_4.5.0            tidyselect_1.2.1    \n [79] miniUI_0.1.1.1       knitr_1.48           gridExtra_2.3       \n [82] V8_6.0.0             groupdata2_2.0.3     stats4_4.4.1        \n [85] xfun_0.48            rstanarm_2.32.1      matrixStats_1.4.1   \n [88] DT_0.33              rstan_2.32.6         stringi_1.8.4       \n [91] ggfun_0.1.7          yaml_2.3.8           boot_1.3-30         \n [94] evaluate_1.0.1       codetools_0.2-20     ggplotify_0.1.2     \n [97] cli_3.6.2            RcppParallel_5.1.9   shinythemes_1.2.0   \n[100] xtable_1.8-4         munsell_0.5.1        Rcpp_1.0.12         \n[103] parallel_4.4.1       rstantools_2.4.0     dygraphs_1.1.1.6    \n[106] bayesplot_1.11.1     lme4_1.1-35.5        scales_1.3.0        \n[109] xts_0.14.0           e1071_1.7-14         crayon_1.5.3        \n[112] rlang_1.1.4          shinyjs_2.1.0       \n```\n\n\n:::\n:::\n\n\n:::\n\n\n::: {.callout-note collapse=\"true\"}\n## Example Callout Block\n\n`note`, `tip`, `warning`, `caution`, or `important`\n:::\n\n\n:::: {.columns}\n\n::: {.column width=\"45%\"}\n\t\n:::\n\n::: {.column width=\"10%\"}\n\t\n:::\n\n::: {.column width=\"45%\"}\n\n:::\n\n::::\n\n::::: {.panel-tabset}\n\n\n\n:::::",
    "supporting": [
      "15_confidence_intervals_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}