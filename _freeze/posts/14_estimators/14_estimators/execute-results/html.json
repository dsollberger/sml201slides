{
  "hash": "231ed49b985fe1e3b3f7e035dd4c4c15",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"14: Estimators\"\nauthor: \"Derek Sollberger\"\ndate: \"2024-10-29\"\nformat:\n  html:\n    toc: true\n    theme: cerulean\n---\n\n\n\n# SML 201\n\n::: {.callout-note collapse=\"true\"}\n## Libraries and Helper Functions\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"gt\")        #great tables\nlibrary(\"tidyverse\") #tools for data wrangling and visualization\n\n# school colors\nprinceton_orange <- \"#E77500\"\nprinceton_black  <- \"#121212\"\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nvbinom <- function(k_obs, n, p, labels = TRUE){\n# make data frame\nk_vals <- 0:n\npk     <- dbinom(k_vals, n, p)\nk_bool <- k_vals %in% k_obs\ndf_binom <- data.frame(k_vals, pk, k_bool)\n\n# compute requested probability\nanswer_prob = round(sum(dbinom(k_obs, n, p)), 4)\n\n# define bar plot\nthis_plot <- if(labels){\n  df_binom |>\n    ggplot(aes(x = factor(k_vals), y = pk, color = k_bool, fill = k_bool)) +\n    geom_bar(stat = \"identity\") +\n    geom_label(aes(x = factor(k_vals), y = pk, label = round(pk, 4)),\n               color = \"black\", fill = \"white\") +\n    labs(subtitle = paste0(\"n = \", n, \", k = \", list(k_obs), \", p = \", p, \", P(k = \", list(k_obs), \") = \", answer_prob),\n         caption = \"SML 201\",\n         y = \"probability\") +\n    theme(\n      legend.position = \"bottom\",\n      panel.background = element_blank()\n    )\n} else{\n  df_binom |>\n    ggplot(aes(x = factor(k_vals), y = pk, color = k_bool, fill = k_bool)) +\n    geom_bar(stat = \"identity\") +\n    labs(subtitle = paste0(\"n = \", n, \", k = \", list(k_obs), \", p = \", p, \", P(k = \", list(k_obs), \") = \", answer_prob),\n         caption = \"SML 201\",\n         y = \"probability\") +\n    theme(\n      legend.position = \"bottom\",\n      panel.background = element_blank()\n    )\n}\n\n# plot bar chart\nthis_plot\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# helper function\nvnorm <- function(x, mu = 0, sigma = 1, section = \"lower\"){\n  \n  # bell curve\n  x_vals <- seq(mu - 4*sigma, mu + 4*sigma, length.out = 201)\n  y_vals <- dnorm(x_vals, mu, sigma)\n  df_for_graph <- data.frame(x_vals, y_vals)\n\n  # outline shaded regions\n  if(length(x) == 1){\n    shade_left <- rbind(c(x[1],0), df_for_graph |>\n                        filter(x_vals < x[1]))\n    shade_right <- rbind(c(x[1],0), df_for_graph |>\n                        filter(x_vals > x[1]))\n  }\n  if(length(x) == 2){\n    shade_between <- rbind(c(x[1],0),\n                       df_for_graph |>\n                         filter(x_vals > x[1] &\n                                  x_vals < x[2]),\n                       c(x[2],0))\n    shade_tails <- rbind(df_for_graph |>\n                        filter(x_vals < x[1]),\n                     c(x[1],0),\n                     c(x[2],0),\n                     df_for_graph |>\n                        filter(x_vals > x[2]))\n  }\n  if(section == \"lower\"){\n    bell_curve <- df_for_graph |>\n      ggplot(aes(x_vals, y_vals)) +\n      geom_polygon(aes(x = x_vals, y = y_vals),\n                   data = shade_left,\n                   fill = \"#E77500\",) +\n      geom_line(color = \"gray50\", linewidth = 2)\n    prob_val <- round(pnorm(x,mu,sigma), 4)\n  }\n  if(section == \"upper\"){\n    bell_curve <- df_for_graph |>\n      ggplot(aes(x_vals, y_vals)) +\n      geom_polygon(aes(x = x_vals, y = y_vals),\n                   data = shade_right,\n                   fill = \"#E77500\",) +\n      geom_line(color = \"gray50\", linewidth = 2)\n    prob_val <- 1 - round(pnorm(x,mu,sigma), 4)\n  }\n  if(section == \"between\"){\n    bell_curve <- df_for_graph |>\n      ggplot(aes(x_vals, y_vals)) +\n      geom_polygon(aes(x = x_vals, y = y_vals),\n                   data = shade_between,\n                   fill = \"#E77500\",) +\n      geom_line(color = \"gray50\", linewidth = 2)\n    prob_val <- round(diff(pnorm(x,mu,sigma)), 4)\n  }\n  if(section == \"tails\"){\n    bell_curve <- df_for_graph |>\n      ggplot(aes(x_vals, y_vals)) +\n      geom_polygon(aes(x = x_vals, y = y_vals),\n                   data = shade_tails,\n                   fill = \"#E77500\",) +\n      geom_line(color = \"gray50\", linewidth = 2)\n    prob_val <- round(1 - diff(pnorm(x,mu,sigma)), 4)\n  }\n  \n  # plot bell curve\n  bell_curve + \n    labs(subtitle = paste0(\"Probability: \", prob_val),\n         caption = \"SML 201\", y = \"\") +\n    theme_minimal()\n}\n```\n:::\n\n\n\n:::\n\n## Start\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n* **Goal**: Estimate known population statistics\n\n* **Objective**: Use density plots to explore biased and unbiased estimators\n:::\n\n::: {.column width=\"10%\"}\n\n:::\n\n::: {.column width=\"40%\"}\n![d20](d20_die.png)\n:::\n\n::::\n\n\n## Recap: Mean Corpuscular Volume\n\nThe mean corpusular volume or mean cell volume (MCV) is the average volume of a red blood cell.  The following information was gathered, adapted, heavily rounded from the [Wikipedia page](https://en.wikipedia.org/wiki/Mean_corpuscular_volume#cite_note-2), and should not constitute medical advice.  For these mathematical examples, **assume that the mean MCV is $\\mu = 90$ fL/cell** with a standard deviation of $\\sigma = 5$ fL/cell and that we can apply the normal distribution based on numerous blood tests.\n\n::: {.callout-note}\n## Estimating Populations\n\n> How did we know that the average MCV was 90 for the entire population?\n\n* We actually don't know the population mean.\n* Historical data points toward a *sample mean* of $\\bar{x} = 90$ fL/cell.\n* Why are we allowed to go from the sample mean $\\bar{x}$ to the population mean $\\mu$?\n:::\n\n\n\n\n# Scenario: D20\n\n::::: {.panel-tabset}\n\n## Outcomes\n\nFor today's session, we need a setting with *known* statistics (mean, median, variance, etc.).  Picture a \"d20\" (i.e. a 20-sided die).  Its outcome space is a discrete uniform distribution (i.e. each outcome is equally likely):\n\n$$X = \\{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20\\}$$\n\n:::: {.columns}\n\n::: {.column width=\"45%\"}\n![d6](d6_die.png)\n:::\n\n::: {.column width=\"10%\"}\n\t\n:::\n\n::: {.column width=\"45%\"}\n![d20](d20_die.png)\n:::\n\n::::\n\n## Population Statistics\n\n$$\\begin{array}{rrcccl}\n  \\text{mean: } & \\mu & = & \\frac{1}{N}\\sum_{i=1}^{N} x_{i} & = & 10.5 \\\\\n  \\text{median: } & \\nu & = & \\frac{1}{2}\\left(x_{\\lfloor\\frac{N+1}{2}\\rfloor} + x_{\\lceil\\frac{N+1}{2}\\rceil}\\right) & = & 10.5 \\\\\n  \\text{variance: } & \\mu & = & \\frac{1}{N}\\sum_{i=1}^{N} (x_{i} - \\mu)^{2} & = & 33.25 \\\\\n\\end{array}$$\n\n## Code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# outcome space (already sorted)\nd20_die <- 1:20\n\n# population length\nN <- length(d20_die)\n\n# population mean\nmu <- sum(d20_die)/N\n\n# population median\nnu <- 0.5*(d20_die[floor((N+1)/2)] + d20_die[ceiling((N+1)/2)])\n\n# population variance\nsigma_sq <- sum((d20_die - mu)^2)/N\n\n# population standard deviation\nsigma <- sqrt(sigma_sq)\n```\n:::\n\n\n\n:::::\n\n::: {.callout-note}\n\n## Experiment's Design\n\n1. roll the d20 $n = 10$ times\n2. compute a sample stat (e.g. mean)\n3. repeat steps (1) and (2) $N = 1000$ times\n4. construct density plot of the *sampling distribution*\n5. compare the mode(s) of the density plot to population stat\n:::\n\n\n# Biased or Unbiased\n\n## Sample Mean\n\n$$\\bar{x} = \\frac{1}{n}\\sum_{i=1}^{n} x_{i}$$\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nN <- 10000 #number of experiment iterations\nsamp_dist <- rep(NA, N) #allocate space to store sample calculations\n\nfor(i in 1:N){\n\n  #roll d20 n = 10 times\n  these_rolls <- sample(d20_die, size = 10, replace = TRUE)\n  \n  #record this sample stat\n  samp_dist[i] <- mean(these_rolls)\n}\n\ndf_for_graph <- data.frame(\n  id = 1:N,\n  samp_dist = samp_dist\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_for_graph |>\n  ggplot() +\n  geom_density(aes(x = samp_dist), \n               color = \"black\", linewidth = 2) +\n  geom_vline(aes(xintercept = mu), \n             color = \"red\", linewidth = 3) +\n  geom_vline(aes(xintercept = mean(samp_dist)), \n             color = princeton_orange, linetype = 2, linewidth = 3) +\n  labs(title = \"Biased or Unbiased?\",\n       subtitle = \"black: sample distribution\\norange: average of samples\\nred: true population stat\",\n       caption = \"SML 201\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](14_estimators_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\nWe say that the sample mean $\\bar{x}$ is an **unbiased estimator** for the population mean $\\mu$.\n\n## Sample Median\n\n$$\\nu = \\frac{1}{2}\\left(x_{\\lfloor\\frac{n+1}{2}\\rfloor} + x_{\\lceil\\frac{n+1}{2}\\rceil}\\right)$$\n\nFor this experiment, Derek wanted an asymmetrical outcome space.\n\n$$\\{1, 2, 3, 14, 16, 18, 20\\}$$\nwhose population median is $\\nu = 14$.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd7_die <- c(1, 2, 3, 14, 16, 18, 20)\nN <- 10000 #number of experiment iterations\nsamp_dist <- rep(NA, N) #allocate space to store sample calculations\n\nfor(i in 1:N){\n\n  #roll d20 n = 10 times\n  these_rolls <- sample(d7_die, size = 10, replace = TRUE)\n  \n  #record this sample stat\n  samp_dist[i] <- median(these_rolls)\n}\n\ndf_for_graph <- data.frame(\n  id = 1:N,\n  samp_dist = samp_dist\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_for_graph |>\n  ggplot() +\n  geom_density(aes(x = samp_dist), \n               color = \"black\", linewidth = 2) +\n  geom_vline(aes(xintercept = 14), \n             color = \"red\", linewidth = 3) +\n  geom_vline(aes(xintercept = mean(samp_dist)), \n             color = princeton_orange, linetype = 2, linewidth = 3) +\n  labs(title = \"Biased or Unbiased?\",\n       subtitle = \"black: sample distribution\\norange: average of samples\\nred: true population stat\",\n       caption = \"SML 201\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](14_estimators_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\nSince the modes do not appear to align with the population median, we say that the sample median is a **biased estimator** of the population median.  In our visualizations today, the **bias** is the horizontal distance between the red and orange lines.\n\n\n## Population Variance\n\n$$\\sigma^{2} = \\frac{1}{N}\\sum_{i=1}^{N} (x_{i} - \\mu)^{2}$$\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npop_var <- function(x){\n  N <- length(x)\n  mu <- mean(x)\n  sigma_sq <- sum((x - mu)^{2})/N\n  \n  #return\n  sigma_sq\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nN <- 10000 #number of experiment iterations\nsamp_dist <- rep(NA, N) #allocate space to store sample calculations\n\nfor(i in 1:N){\n\n  #roll d20 n = 10 times\n  these_rolls <- sample(d20_die, size = 10, replace = TRUE)\n  \n  #record this sample stat\n  samp_dist[i] <- pop_var(these_rolls)\n}\n\ndf_for_graph <- data.frame(\n  id = 1:N,\n  samp_dist = samp_dist\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_for_graph |>\n  ggplot() +\n  geom_density(aes(x = samp_dist), \n               color = \"black\", linewidth = 2) +\n  geom_vline(aes(xintercept = sigma_sq), \n             color = \"red\", linewidth = 3) +\n  geom_vline(aes(xintercept = mean(samp_dist)), \n             color = princeton_orange, linetype = 2, linewidth = 3) +\n  labs(title = \"Biased or Unbiased?\",\n       subtitle = \"black: sample distribution\\norange: average of samples\\nred: true population stat\",\n       caption = \"SML 201\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](14_estimators_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\nUpon reapplying the population variance formula to the samples, we see that the resulting sampling distribution tends to underestimate the true population variance.  So far, this formula is a **biased estimator** of the population variance.\n\n\n## Sample Variance\n\n$$s^{2} = \\frac{1}{n-1}\\sum_{i=1}^{n} (x_{i} - \\bar{x})^{2}$$\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsamp_var <- function(x){\n  n <- length(x)\n  xbar <- mean(x)\n  \n  # Bessel's correction: \"n-1\"\n  s_sq <- sum((x - xbar)^{2})/(n-1)\n  \n  #return\n  s_sq\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nN <- 10000 #number of experiment iterations\nsamp_dist <- rep(NA, N) #allocate space to store sample calculations\n\nfor(i in 1:N){\n\n  #roll d20 n = 10 times\n  these_rolls <- sample(d20_die, size = 10, replace = TRUE)\n  \n  #record this sample stat\n  samp_dist[i] <- samp_var(these_rolls)\n}\n\ndf_for_graph <- data.frame(\n  id = 1:N,\n  samp_dist = samp_dist\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_for_graph |>\n  ggplot() +\n  geom_density(aes(x = samp_dist), \n               color = \"black\", linewidth = 2) +\n  geom_vline(aes(xintercept = sigma_sq), \n             color = \"red\", linewidth = 3) +\n  geom_vline(aes(xintercept = mean(samp_dist)), \n             color = princeton_orange, linetype = 2, linewidth = 3) +\n  labs(title = \"Biased or Unbiased?\",\n       subtitle = \"black: sample distribution\\norange: average of samples\\nred: true population stat\",\n       caption = \"SML 201\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](14_estimators_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n\nNow, with Bessel's correction, we say that the sample variance is an **unbiased estimator** for the population variance.\n\n::: {.callout-note collapse=\"true\"}\n## (optional) Bessel's Correction\n\n**Claim:** The sample variance formula with $n-1$\n\n$$s^{2} = \\frac{1}{n-1}\\sum_{i=1}^{n} (x_{i} - \\bar{x})^{2}$$\nis an unbiased estimator for the population variance $\\sigma^{2}$.\n\n**Proof**: (omitted)\n\n* takes about 4 Calculus lectures to explain\n\n:::\n\n\n\n\n\n\n\n\n## Sample Standard Deviation\n\n$$s= \\sqrt{\\frac{1}{n}\\sum_{i=1}^{n} (x_{i} - \\bar{x})^{2}}$$\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(20241029)\nN <- 10000 #number of experiment iterations\nsamp_dist <- rep(NA, N) #allocate space to store sample calculations\n\nfor(i in 1:N){\n\n  #roll d20 n = 10 times\n  these_rolls <- sample(d20_die, size = 10, replace = TRUE)\n  \n  #record this sample stat\n  samp_dist[i] <- sqrt(samp_var(these_rolls))\n}\n\ndf_for_graph <- data.frame(\n  id = 1:N,\n  samp_dist = samp_dist\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_for_graph |>\n  ggplot() +\n  geom_density(aes(x = samp_dist), \n               color = \"black\", linewidth = 2) +\n  geom_vline(aes(xintercept = sigma), \n             color = \"red\", linewidth = 3) +\n  geom_vline(aes(xintercept = mean(samp_dist)), \n             color = princeton_orange, linetype = 2, linewidth = 3) +\n  labs(title = \"Biased or Unbiased?\",\n       subtitle = \"black: sample distribution\\norange: average of samples\\nred: true population stat\",\n       caption = \"SML 201\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](14_estimators_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n\nIt can be mathematically proven that the sample standard deviation is a *biased* estimator (as it tends to underestimate the true population standard deviation), but the bias is treated as negligible in practice.\n\n\n## Sample Extrema\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nN <- 10000 #number of experiment iterations\nsamp_dist <- rep(NA, N) #allocate space to store sample calculations\n\nfor(i in 1:N){\n\n  #roll d20 n = 10 times\n  these_rolls <- sample(d20_die, size = 10, replace = TRUE)\n  \n  #record this sample stat\n  samp_dist[i] <- min(these_rolls)\n}\n\ndf_for_graph <- data.frame(\n  id = 1:N,\n  samp_dist = samp_dist\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_for_graph |>\n  ggplot() +\n  geom_density(aes(x = samp_dist), \n               color = \"black\", linewidth = 2) +\n  geom_vline(aes(xintercept = 1), \n             color = \"red\", linewidth = 3) +\n  geom_vline(aes(xintercept = mean(samp_dist)), \n             color = princeton_orange, linetype = 2, linewidth = 3) +\n  labs(title = \"Biased or Unbiased?\",\n       subtitle = \"black: sample distribution\\norange: average of samples\\nred: true population stat\",\n       caption = \"SML 201\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](14_estimators_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n\nIt is quickly apparent that the sample minimum (or maximum) is a **biased estimator** for the population minimum (or maximum).\n\n\n## Sample Proportion\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nN <- 10000 #number of experiment iterations\nsamp_dist <- rep(NA, N) #allocate space to store sample calculations\n\nfor(i in 1:N){\n\n  #roll d20 n = 10 times\n  these_rolls <- sample(d20_die, size = 10, replace = TRUE)\n  \n  #record this sample stat\n  samp_dist[i] <- mean(these_rolls < 12)\n}\n\ndf_for_graph <- data.frame(\n  id = 1:N,\n  samp_dist = samp_dist\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_for_graph |>\n  ggplot() +\n  geom_density(aes(x = samp_dist), \n               color = \"black\", linewidth = 2) +\n  geom_vline(aes(xintercept = 11/20), \n             color = \"red\", linewidth = 3) +\n  geom_vline(aes(xintercept = mean(samp_dist)), \n             color = princeton_orange, linetype = 2, linewidth = 3) +\n  labs(title = \"Biased or Unbiased?\",\n       subtitle = \"black: sample distribution\\norange: average of samples\\nred: true population stat\",\n       caption = \"SML 201\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](14_estimators_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n\nIt may not be apparent from this empirical experiment, but the sample proportion is said to be an **unbiased estimator** for the population proportion.\n\n\n## Summary\n\nWhen are we allowed to use sample statistics to describe the overall population.  We proceed by using unbiased estimators (and the sample standard deviation).\n\n::::: {.panel-tabset}\n\n## gt table\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"lcfovpjzfz\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>#lcfovpjzfz table {\n  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#lcfovpjzfz thead, #lcfovpjzfz tbody, #lcfovpjzfz tfoot, #lcfovpjzfz tr, #lcfovpjzfz td, #lcfovpjzfz th {\n  border-style: none;\n}\n\n#lcfovpjzfz p {\n  margin: 0;\n  padding: 0;\n}\n\n#lcfovpjzfz .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#lcfovpjzfz .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#lcfovpjzfz .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#lcfovpjzfz .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#lcfovpjzfz .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#lcfovpjzfz .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#lcfovpjzfz .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#lcfovpjzfz .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#lcfovpjzfz .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#lcfovpjzfz .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#lcfovpjzfz .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#lcfovpjzfz .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#lcfovpjzfz .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#lcfovpjzfz .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#lcfovpjzfz .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#lcfovpjzfz .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#lcfovpjzfz .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#lcfovpjzfz .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#lcfovpjzfz .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#lcfovpjzfz .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#lcfovpjzfz .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#lcfovpjzfz .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#lcfovpjzfz .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#lcfovpjzfz .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#lcfovpjzfz .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#lcfovpjzfz .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#lcfovpjzfz .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#lcfovpjzfz .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#lcfovpjzfz .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #D3D3D3;\n}\n\n#lcfovpjzfz .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#lcfovpjzfz .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#lcfovpjzfz .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#lcfovpjzfz .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#lcfovpjzfz .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#lcfovpjzfz .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#lcfovpjzfz .gt_left {\n  text-align: left;\n}\n\n#lcfovpjzfz .gt_center {\n  text-align: center;\n}\n\n#lcfovpjzfz .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#lcfovpjzfz .gt_font_normal {\n  font-weight: normal;\n}\n\n#lcfovpjzfz .gt_font_bold {\n  font-weight: bold;\n}\n\n#lcfovpjzfz .gt_font_italic {\n  font-style: italic;\n}\n\n#lcfovpjzfz .gt_super {\n  font-size: 65%;\n}\n\n#lcfovpjzfz .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#lcfovpjzfz .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#lcfovpjzfz .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#lcfovpjzfz .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#lcfovpjzfz .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#lcfovpjzfz .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#lcfovpjzfz .gt_indent_5 {\n  text-indent: 25px;\n}\n\n#lcfovpjzfz .katex-display {\n  display: inline-flex !important;\n  margin-bottom: 0.75em !important;\n}\n\n#lcfovpjzfz div.Reactable > div.rt-table > div.rt-thead > div.rt-tr.rt-tr-group-header > div.rt-th-group:after {\n  height: 0px !important;\n}\n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n  <thead>\n    <tr class=\"gt_heading\">\n      <td colspan=\"2\" class=\"gt_heading gt_title gt_font_normal\" style>Statistical Estimators</td>\n    </tr>\n    <tr class=\"gt_heading\">\n      <td colspan=\"2\" class=\"gt_heading gt_subtitle gt_font_normal gt_bottom_border\" style>from samples to populations</td>\n    </tr>\n    <tr class=\"gt_col_headings\">\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" style=\"font-weight: bold;\" scope=\"col\" id=\"estimator\">estimator</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" style=\"font-weight: bold;\" scope=\"col\" id=\"bias\">bias</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"estimator\" class=\"gt_row gt_center\" style=\"background-color: #E77500; font-weight: bold;\">sample mean</td>\n<td headers=\"bias\" class=\"gt_row gt_center\" style=\"background-color: #E77500; font-weight: bold;\">unbiased</td></tr>\n    <tr><td headers=\"estimator\" class=\"gt_row gt_center\" style=\"color: #FF0000;\">sample median</td>\n<td headers=\"bias\" class=\"gt_row gt_center\" style=\"color: #FF0000;\">biased</td></tr>\n    <tr><td headers=\"estimator\" class=\"gt_row gt_center\" style=\"color: #FF0000;\">population variance</td>\n<td headers=\"bias\" class=\"gt_row gt_center\" style=\"color: #FF0000;\">biased</td></tr>\n    <tr><td headers=\"estimator\" class=\"gt_row gt_center\" style=\"background-color: #E77500; font-weight: bold;\">sample variance</td>\n<td headers=\"bias\" class=\"gt_row gt_center\" style=\"background-color: #E77500; font-weight: bold;\">unbiased</td></tr>\n    <tr><td headers=\"estimator\" class=\"gt_row gt_center\">sample standard deviation</td>\n<td headers=\"bias\" class=\"gt_row gt_center\">negligible bias</td></tr>\n    <tr><td headers=\"estimator\" class=\"gt_row gt_center\" style=\"color: #FF0000;\">sample minimum</td>\n<td headers=\"bias\" class=\"gt_row gt_center\" style=\"color: #FF0000;\">biased</td></tr>\n    <tr><td headers=\"estimator\" class=\"gt_row gt_center\" style=\"color: #FF0000;\">sample maximum</td>\n<td headers=\"bias\" class=\"gt_row gt_center\" style=\"color: #FF0000;\">biased</td></tr>\n    <tr><td headers=\"estimator\" class=\"gt_row gt_center\" style=\"background-color: #E77500; font-weight: bold;\">sample proportion</td>\n<td headers=\"bias\" class=\"gt_row gt_center\" style=\"background-color: #E77500; font-weight: bold;\">unbiased</td></tr>\n  </tbody>\n  \n  <tfoot class=\"gt_footnotes\">\n    <tr>\n      <td class=\"gt_footnote\" colspan=\"2\"> SML 201</td>\n    </tr>\n  </tfoot>\n</table>\n</div>\n```\n\n:::\n:::\n\n\n\n## code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata.frame(\n  estimator = c(\"sample mean\", \"sample median\", \"population variance\", \"sample variance\", \"sample standard deviation\", \"sample minimum\", \"sample maximum\", \"sample proportion\"),\n  bias = c(\"unbiased\", \"biased\", \"biased\", \"unbiased\", \"negligible bias\", \"biased\", \"biased\", \"unbiased\")\n) |>\n  gt() |>\n  cols_align(align = \"center\") |>\n  tab_footnote(footnote = \"SML 201\") |>\n  tab_header(\n    title = \"Statistical Estimators\",\n    subtitle = \"from samples to populations\"\n  ) |>\n  tab_style(\n    style = cell_text(weight = \"bold\"),\n    locations = cells_column_labels()\n  ) |>\n  tab_style(\n    style = cell_text(color = \"red\"),\n    locations = cells_body(rows = bias == \"biased\")\n  ) |>\n  tab_style(\n    style = list(\n      cell_fill(color = princeton_orange),\n      cell_text(weight = \"bold\")\n    ),\n    locations = cells_body(rows = bias == \"unbiased\")\n  )\n```\n:::\n\n\n\n:::::\n\n\n# Animations\n\nThe `gifski` package allows us to make animations from a collection of still images.\n\n## Horizontal Translation\n\n* `mu_vals <- seq(-4, 4, by = 0.5)`\n* $x \\in \\mu \\pm 1$\n* $\\sigma = 1$\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmu_vals <- seq(-4, 4, by = 0.5)\nN <- length(mu_vals)\n\nfor(i in 1:N){\n  this_plot <- vnorm(c(mu_vals[i] - 1, mu_vals[i] + 1), \n                     mu_vals[i], 1, section = \"between\") +\n    labs(title = \"Changing Mean\") +\n    xlim(-5, 5)\n  ggsave(paste0(\"images/norm_plot\", LETTERS[i], \".png\"), this_plot)\n}\n\npng_files <- Sys.glob(\"images/norm_plot*.png\")\n\ngifski::gifski(\n  png_files,\n  \"norm_animation.gif\",      #output file name\n  height = 800, width = 800, #you may change the resolution\n  delay = 1/2                #seconds\n)\n```\n:::\n\n\n\n![bell curve, changing means](norm_animation.gif)\n\n## Increasing Sample Size\n\nHere we will use the `vbinom` function with various increasing values for the sample size $n$ and a constant value for the population proportion $p$.\n\n* `n_vals <- seq(9, 30)`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn_vals <- seq(9, 30)\np      <- 0.37\nN      <- length(n_vals)\n\nfor(i in 1:N){\n  this_plot <- vbinom(round(n_vals[i]/4):round(3*n_vals[i]/4), \n                      n_vals[i], p, labels = FALSE) +\n    labs(title = \"Central Limit Theorem\")\n  ggsave(paste0(\"images/CLT_plot\", LETTERS[i], \".png\"), this_plot)\n}\n\npng_files <- Sys.glob(\"images/CLT_plot*.png\")\n\ngifski::gifski(\n  png_files,\n  \"CLT_animation.gif\",    #output file name\n  height = 800, width = 800, #you may change the resolution\n  delay = 1/3                #seconds\n)\n```\n:::\n\n\n\n![Central Limit Theorem](CLT_animation.gif)\n\n# Central Limit Theorem\n\nThe **Central Limit Theorem** states that the sampling distribution of the mean converges to the standard normal distribution\n\n$$z\\text{-score:} \\quad z = \\frac{x - \\mu}{\\sigma} \\quad\\rightarrow\\quad Z_{n} = \\frac{\\bar{X}_{n} - \\mu}{\\frac{\\sigma}{\\sqrt{n}}}$$\n\n## Example: Computing Cluster\n\nFor a request to use the campus computing cluster, and knowing that your independent jobs’ duration times are normally distributed with a mean of one hour and a standard deviation of 10 minutes, answer the following inquiries.\n\n## One Observation\n\n1. What is the probability that a randomly selected job has a duration of under 57 minutes.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npnorm(57, 60, 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.3820886\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nvnorm(57, 60, 10) +\n  labs(title = \"Campus Computing Example (n = 1 job)\") +\n  xlim(20, 100)\n```\n\n::: {.cell-output-display}\n![](14_estimators_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\n\n## Average Observation\n\n2. What is the probability that the *average* duration of your 28 jobs is less than 57 minutes?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npnorm(57, 60, 10/sqrt(28))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.05620529\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nvnorm(57, 60, 10/sqrt(28)) +\n  labs(title = \"Campus Computing Example (n = 28 jobs)\") +\n  xlim(20, 100)\n```\n\n::: {.cell-output-display}\n![](14_estimators_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n\n\n::: {.callout-tip}\n## Intuition\n\nAs the sample size ($n$) increases, it is less likely to observe an average in the tails of a normal distribution.\n:::\n\n\n\n# Quo Vadimus?\n\n:::: {.columns}\n\n::: {.column width=\"40%\"}\n* Precept 7\n* Project 2 (due Oct 30)\n* Coloring Assignment 2\n* Exam 2 (December 5)\n:::\n\n::: {.column width=\"10%\"}\n\t\n:::\n\n::: {.column width=\"50%\"}\n![National Testing Center bell curve](simpsons_bell.png)\n\n* image source: *Simpsons* (TV show)\n\n:::\n\n::::\n\n\n# Footnotes\n\n::: {.callout-note collapse=\"true\"}\n## (optional) Additional Resources\n\n\n\n:::\n\n::: {.callout-note collapse=\"true\"}\n## Session Info\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 10 x64 (build 19045)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n [1] lubridate_1.9.3 forcats_1.0.0   stringr_1.5.1   dplyr_1.1.4    \n [5] purrr_1.0.2     readr_2.1.5     tidyr_1.3.1     tibble_3.2.1   \n [9] ggplot2_3.5.1   tidyverse_2.0.0 gt_0.11.1      \n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.5      jsonlite_1.8.8    compiler_4.4.1    tidyselect_1.2.1 \n [5] xml2_1.3.6        scales_1.3.0      yaml_2.3.8        fastmap_1.2.0    \n [9] R6_2.5.1          labeling_0.4.3    generics_0.1.3    knitr_1.48       \n[13] htmlwidgets_1.6.4 munsell_0.5.1     pillar_1.9.0      tzdb_0.4.0       \n[17] rlang_1.1.4       utf8_1.2.4        stringi_1.8.4     xfun_0.48        \n[21] sass_0.4.9        timechange_0.3.0  cli_3.6.2         withr_3.0.1      \n[25] magrittr_2.0.3    digest_0.6.35     grid_4.4.1        rstudioapi_0.17.0\n[29] hms_1.1.3         lifecycle_1.0.4   vctrs_0.6.5       evaluate_1.0.1   \n[33] glue_1.7.0        farver_2.1.2      fansi_1.0.6       colorspace_2.1-1 \n[37] rmarkdown_2.28    tools_4.4.1       pkgconfig_2.0.3   htmltools_0.5.8.1\n```\n\n\n:::\n:::\n\n\n:::\n\n\n::: {.callout-note collapse=\"true\"}\n## Example Callout Block\n\n`note`, `tip`, `warning`, `caution`, or `important`\n:::\n\n\n:::: {.columns}\n\n::: {.column width=\"45%\"}\n\t\n:::\n\n::: {.column width=\"10%\"}\n\t\n:::\n\n::: {.column width=\"45%\"}\n\n:::\n\n::::\n\n::::: {.panel-tabset}\n\n\n\n:::::",
    "supporting": [
      "14_estimators_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}